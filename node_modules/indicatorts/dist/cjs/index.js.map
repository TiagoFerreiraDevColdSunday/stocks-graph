{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/helper/numArray.ts", "../../src/strategy/action.ts", "../../src/backtest/backtest.ts", "../../src/backtest/companyResult.ts", "../../src/strategy/buyAndHoldStrategy.ts", "../../src/indicator/trend/simpleMovingAverage.ts", "../../src/indicator/momentum/awesomeOscillator.ts", "../../src/strategy/momentum/awesomeOscillatorStrategy.ts", "../../src/indicator/momentum/ichimokuCloud.ts", "../../src/strategy/momentum/ichimokuCloudStrategy.ts", "../../src/indicator/trend/rollingMovingAverage.ts", "../../src/indicator/momentum/relativeStrengthIndex.ts", "../../src/strategy/momentum/rsi2Strategy.ts", "../../src/helper/binarySearchTree.ts", "../../src/indicator/trend/movingMin.ts", "../../src/indicator/trend/movingMax.ts", "../../src/indicator/momentum/stochasticOscillator.ts", "../../src/strategy/momentum/stochasticOscillatorStrategy.ts", "../../src/indicator/momentum/williamsR.ts", "../../src/strategy/momentum/williamsRStrategy.ts", "../../src/indicator/trend/exponentialMovingAverage.ts", "../../src/indicator/trend/absolutePriceOscillator.ts", "../../src/strategy/trend/absolutePriceOscillatorStrategy.ts", "../../src/indicator/trend/since.ts", "../../src/indicator/trend/aroon.ts", "../../src/strategy/trend/aroonStrategy.ts", "../../src/indicator/trend/balanceOfPower.ts", "../../src/strategy/trend/balanceOfPowerStrategy.ts", "../../src/helper/regression.ts", "../../src/indicator/trend/chandeForecastOscillator.ts", "../../src/strategy/trend/chandeForecastOscillatorStrategy.ts", "../../src/indicator/trend/randomIndex.ts", "../../src/strategy/trend/kdjStrategy.ts", "../../src/indicator/trend/movingAverageConvergenceDivergence.ts", "../../src/strategy/trend/macdStrategy.ts", "../../src/indicator/types.ts", "../../src/indicator/trend/parabolicSar.ts", "../../src/strategy/trend/parabolicSarStrategy.ts", "../../src/indicator/trend/typicalPrice.ts", "../../src/strategy/trend/typicalPriceStrategy.ts", "../../src/indicator/trend/movingSum.ts", "../../src/indicator/trend/vortex.ts", "../../src/strategy/trend/vortexStrategy.ts", "../../src/indicator/volatility/accelerationBands.ts", "../../src/strategy/volatility/accelerationBandsStrategy.ts", "../../src/indicator/volatility/movingStandardDeviation.ts", "../../src/indicator/volatility/bollingerBands.ts", "../../src/strategy/volatility/bollingerBandsStrategy.ts", "../../src/indicator/volatility/projectionOscillator.ts", "../../src/strategy/volatility/projectionOscillatorStrategy.ts", "../../src/indicator/volume/chaikinMoneyFlow.ts", "../../src/strategy/volume/chaikinMoneyFlowStrategy.ts", "../../src/indicator/volume/easeOfMovement.ts", "../../src/strategy/volume/easeOfMovementStrategy.ts", "../../src/indicator/volume/forceIndex.ts", "../../src/strategy/volume/forceIndexStrategy.ts", "../../src/indicator/volume/moneyFlowIndex.ts", "../../src/strategy/volume/moneyFlowIndexStrategy.ts", "../../src/indicator/volume/negativeVolumeIndex.ts", "../../src/strategy/volume/negativeVolumeIndexStrategy.ts", "../../src/indicator/volume/volumeWeightedAveragePrice.ts", "../../src/strategy/volume/volumeWeightedAveragePriceStrategy.ts", "../../src/backtest/strategyInfo.ts", "../../src/backtest/strategyStats.ts", "../../src/chart/numRange.ts", "../../src/chart/numScaler.ts", "../../src/chart/chart.ts", "../../src/helper/date.ts", "../../src/indicator/volume/accumulationDistribution.ts", "../../src/indicator/momentum/chaikinOscillator.ts", "../../src/indicator/momentum/percentagePriceOscillator.ts", "../../src/indicator/momentum/percentageVolumeOscillator.ts", "../../src/indicator/momentum/priceRateOfChange.ts", "../../src/indicator/trend/communityChannelIndex.ts", "../../src/indicator/trend/doubleExponentialMovingAverage.ts", "../../src/indicator/trend/massIndex.ts", "../../src/indicator/trend/qstick.ts", "../../src/indicator/trend/triangularMovingAverage.ts", "../../src/indicator/trend/tripleExponentialAverage.ts", "../../src/indicator/trend/tripleExponentialMovingAverage.ts", "../../src/indicator/trend/volumeWeightedMovingAverage.ts", "../../src/indicator/volatility/trueRange.ts", "../../src/indicator/volatility/averageTrueRange.ts", "../../src/indicator/volatility/bollingerBandsWidth.ts", "../../src/indicator/volatility/chandelierExit.ts", "../../src/indicator/volatility/donchianChannel.ts", "../../src/indicator/volatility/keltnerChannel.ts", "../../src/indicator/volatility/ulcerIndex.ts", "../../src/indicator/volume/onBalanceVolume.ts", "../../src/indicator/volume/volumePriceTrend.ts"],
  "sourcesContent": ["// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nexport * from './backtest/index';\nexport * from './chart/index';\nexport * from './company/index';\nexport * from './helper/index';\nexport * from './indicator/index';\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Checkes the values lenghts.\n * @param values values list.\n */\nexport function checkSameLength(...values: number[][]): void {\n  if (values.length > 0) {\n    const length = values[0].length;\n\n    for (let i = 1; i < values.length; i++) {\n      if (values[i].length !== length) {\n        throw new Error(`values length at ${i} not ${length}`);\n      }\n    }\n  }\n}\n\n/**\n * Absolute values of the given values.\n * @param values values array.\n * @return absolute values.\n */\nexport function abs(values: number[]): number[] {\n  return values.map((value) => Math.abs(value));\n}\n\n/**\n * Adds values2 to values1.\n * @param values1 values one.\n * @param values2 values two.\n * @return result array.\n */\nexport function add(values1: number[], values2: number[]): number[] {\n  checkSameLength(values1, values2);\n\n  const result = new Array<number>(values1.length);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = values1[i] + values2[i];\n  }\n\n  return result;\n}\n\n/**\n * Adds n to values.\n * @param n add value.\n * @param values values array.\n * @return result array.\n */\nexport function addBy(n: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    result[i] = values[i] + n;\n  }\n\n  return result;\n}\n\n/**\n * Divides values1 by values2.\n * @param values1 values one.\n * @param values2 values two.\n * @return result array.\n */\nexport function divide(values1: number[], values2: number[]): number[] {\n  checkSameLength(values1, values2);\n\n  const result = new Array<number>(values1.length);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = values1[i] / values2[i];\n  }\n\n  return result;\n}\n\n/**\n * Divides values by n.\n * @param n divide value.\n * @param values values array.\n * @return result array.\n */\nexport function divideBy(n: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    result[i] = values[i] / n;\n  }\n\n  return result;\n}\n\n/**\n * Multiply values1 by values2.\n * @param values1 values one.\n * @param values2 values two.\n * @return result array.\n */\nexport function multiply(values1: number[], values2: number[]): number[] {\n  checkSameLength(values1, values2);\n\n  const result = new Array<number>(values1.length);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = values1[i] * values2[i];\n  }\n\n  return result;\n}\n\n/**\n * Multiply values by n.\n * @param n multiply value.\n * @param values values array.\n * @return result array.\n */\nexport function multiplyBy(n: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = values[i] * n;\n  }\n\n  return result;\n}\n\n/**\n * Subtracts values2 from values1.\n * @param values1 values one.\n * @param values2 values two.\n * @return result array.\n */\nexport function subtract(values1: number[], values2: number[]): number[] {\n  checkSameLength(values1, values2);\n\n  const result = new Array<number>(values1.length);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = values1[i] - values2[i];\n  }\n\n  return result;\n}\n\n/**\n * Subtractes n from values.\n * @param n subtract value.\n * @param values values array.\n * @return result array.\n */\nexport function subtractBy(n: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    result[i] = values[i] - n;\n  }\n\n  return result;\n}\n\n/**\n * Shift values right by given amount and fill with value.\n * @param n shift amount.\n * @param fill fill value.\n * @param values values array.\n * @returns shifted and filled values.\n */\nexport function shiftRightAndFillBy(\n  n: number,\n  fill: number,\n  values: number[]\n): number[] {\n  const result = new Array<number>(values.length);\n\n  for (let i = 0; i < result.length; i++) {\n    if (i < n) {\n      result[i] = fill;\n    } else {\n      result[i] = values[i - n];\n    }\n  }\n\n  return result;\n}\n\n/**\n * Shifts values right by given amount.\n * @param n shift amount.\n * @param values values array.\n * @return shifted values.\n */\nexport function shiftRightBy(n: number, values: number[]): number[] {\n  return shiftRightAndFillBy(n, 0, values);\n}\n\n/**\n * Shift values left by given amount and fill with value.\n * @param n shift amount.\n * @param fill fill value.\n * @param values values array.\n * @returns shifted and filled values.\n */\nexport function shiftLeftAndFillBy(\n    n: number,\n    fill: number,\n    values: number[]\n): number[] {\n  const length = values.length\n  const result: number[] = Array(length).fill(fill);\n\n  for (let i = n; i < length; i++) {\n    const newIndex = (i - n + length) % length;\n    result[newIndex] = values[i];\n  }\n\n  return result;\n}\n\n/**\n * Shifts values left by given amount.\n * @param n shift amount.\n * @param values values array.\n * @return shifted values.\n */\nexport function shiftLeftBy(n: number, values: number[]): number[] {\n  return shiftLeftAndFillBy(n, 0, values);\n}\n\n/**\n * Change between the current value and the value n before.\n * @param n shift amount.\n * @param values values array.\n * @returns changes array.\n */\nexport function changes(n: number, values: number[]): number[] {\n  return subtract(values, shiftRightBy(n, values));\n}\n\n/**\n * Extracts the sign of the values. Returns 1 for the\n * positive and zero, and -1 for the negative.\n * @param values values array.\n * @return sign values.\n */\nexport function extractSigns(values: number[]): number[] {\n  return values.map((value) => (value >= 0 ? 1 : -1));\n}\n\n/**\n * Transpose of given values.\n * @param values values arrays.\n * @return transposed values.\n */\nexport function transpose(...values: number[][]): number[][] {\n  checkSameLength(...values);\n\n  const result = new Array<number[]>(values[0].length);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = new Array<number>(values.length);\n    for (let j = 0; j < result[i].length; j++) {\n      result[i][j] = values[j][i];\n    }\n  }\n\n  return result;\n}\n\n/**\n * Max value of rows.\n * @param values values arrays.\n * @return max rows.\n */\nexport function max(...values: number[][]): number[] {\n  return transpose(...values).map((row) => Math.max(...row));\n}\n\n/**\n * Rounds the value to given number of digits.\n * @param digits digits number.\n * @param value numeric value.\n * @return rounded value.\n */\nexport function roundDigits(digits: number, value: number): number {\n  const n = Math.pow(10, digits);\n  return Math.round(value * n) / n;\n}\n\n/**\n * Rounds the values to given number of digits.\n * @param digits digits number.\n * @param values values array.\n * @return rounded values.\n */\nexport function roundDigitsAll(digits: number, values: number[]): number[] {\n  return values.map((value) => roundDigits(digits, value));\n}\n\n/**\n * Generates numbers.\n *\n * @param begin begin number.\n * @param end end number.\n * @param step step number.\n * @return generated numbers.\n */\nexport function generateNumbers(\n  begin: number,\n  end: number,\n  step: number\n): number[] {\n  const result = new Array<number>((end - begin) / step);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = begin + step * i;\n  }\n\n  return result;\n}\n\n/**\n * Power of the given bases to the exponent.\n *\n * @param bases base values.\n * @param exponent exponent value.\n * @return power values.\n */\nexport function pow(bases: number[], exponent: number): number[] {\n  return bases.map((base) => Math.pow(base, exponent));\n}\n\n/**\n * Square roots of values.\n * @param values value array.\n * @return square roots.\n */\nexport function sqrt(values: number[]): number[] {\n  return values.map((value) => Math.sqrt(value));\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { checkSameLength } from '../helper/numArray';\n\n/**\n * Strategy action.\n */\nexport enum Action {\n  SELL = -1,\n  HOLD = 0,\n  BUY = 1,\n}\n\n/**\n * Reverses the given actions.\n * @param actions strategy actions.\n * @return reversed actions.\n */\nexport function reverseActions(actions: Action[]): Action[] {\n  return actions.map((action) => {\n    if (action === Action.BUY) {\n      return Action.SELL;\n    } else if (action === Action.SELL) {\n      return Action.BUY;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n\n/**\n * Apply the actions on the closing values to calculate gains.\n *\n * @param closings closing values.\n * @param actions strategy actions.\n * @return strategy gains.\n */\nexport function applyActions(closings: number[], actions: Action[]): number[] {\n  checkSameLength(closings, actions);\n\n  const gains = new Array<number>(closings.length);\n  const initialBalance = 1;\n\n  let balance = initialBalance;\n  let shares = 0;\n\n  for (let i = 0; i < gains.length; i++) {\n    if (actions[i] === Action.BUY) {\n      if (balance > 0) {\n        shares = balance / closings[i];\n        balance = 0;\n      }\n    } else if (actions[i] === Action.SELL) {\n      if (shares > 0) {\n        balance = shares * closings[i];\n        shares = 0;\n      }\n    }\n\n    gains[i] =\n      (shares * closings[i] + balance - initialBalance) / initialBalance;\n  }\n\n  return gains;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { applyActions } from '../strategy/action';\nimport { Asset } from '../strategy/asset';\nimport { StrategyInfo } from './strategyInfo';\nimport { StrategyResult } from './strategyResult';\n\n/**\n * Backtests the given strategies.\n *\n * @param asset asset object.\n * @param infos strategy infos.\n * @return strategy results.\n */\nexport function backtest(\n  asset: Asset,\n  infos: StrategyInfo[]\n): StrategyResult[] {\n  const result = new Array<StrategyResult>(infos.length);\n\n  for (let i = 0; i < result.length; i++) {\n    const actions = infos[i].strategy(asset);\n    const gains = applyActions(asset.closings, actions);\n\n    result[i] = {\n      info: infos[i],\n      gain: gains[gains.length - 1],\n      lastAction: actions[actions.length - 1],\n    };\n  }\n\n  result.sort((a, b) => b.gain - a.gain);\n\n  return result;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { StrategyResult } from './strategyResult';\nimport { CompanyInfo } from '../company/companyInfo';\n\n/**\n * Company result.\n */\nexport interface CompanyResult {\n  companyInfo: CompanyInfo;\n  strategyResults: StrategyResult[];\n}\n\n/**\n * Company result sort by.\n */\nexport enum CompanyResultSortBy {\n  SYMBOL,\n  NAME,\n  STRATEGY,\n  GAIN,\n  ACTION,\n}\n\n/**\n * Sorts the company results.\n *\n * @param companyResults company results.\n * @param sortBy sort by.\n * @param ascending toggle.\n * @return sorted results.\n */\nexport function sortCompanyResults(\n  companyResults: CompanyResult[],\n  sortBy: CompanyResultSortBy,\n  ascending: boolean\n): CompanyResult[] {\n  let sorted: CompanyResult[] = [];\n\n  switch (sortBy) {\n    case CompanyResultSortBy.SYMBOL:\n      sorted = companyResults.sort((a, b) => {\n        return a.companyInfo.symbol.localeCompare(b.companyInfo.symbol);\n      });\n      break;\n\n    case CompanyResultSortBy.NAME:\n      sorted = companyResults.sort((a, b) => {\n        return a.companyInfo.name.localeCompare(b.companyInfo.name);\n      });\n      break;\n\n    case CompanyResultSortBy.STRATEGY:\n      sorted = companyResults.sort((a, b) => {\n        return a.strategyResults[0].info.name.localeCompare(\n          b.strategyResults[0].info.name\n        );\n      });\n      break;\n\n    case CompanyResultSortBy.GAIN:\n      sorted = companyResults.sort((a, b) => {\n        return a.strategyResults[0].gain - b.strategyResults[0].gain;\n      });\n      break;\n\n    case CompanyResultSortBy.ACTION:\n      sorted = companyResults.sort((a, b) => {\n        return (\n          a.strategyResults[0].lastAction - b.strategyResults[0].lastAction\n        );\n      });\n      break;\n  }\n\n  if (!ascending) {\n    sorted = sorted.reverse();\n  }\n\n  return sorted;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from './asset';\nimport { Action } from './action';\n\n/**\n * Buy and hold strategy.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function buyAndHoldStrategy(asset: Asset): Action[] {\n  return Array<Action>(asset.closings.length).fill(Action.BUY);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Optional configuration of SMA parameters.\n */\nexport interface SMAConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of SMA.\n */\nexport const SMADefaultConfig: Required<SMAConfig> = {\n  period: 2,\n};\n\n/**\n * Simple moving average (SMA).\n * @param values values array.\n * @param config configuration.\n * @return SMA values.\n */\nexport function sma(values: number[], config: SMAConfig = {}): number[] {\n  const { period } = { ...SMADefaultConfig, ...config };\n  const result = new Array<number>(values.length);\n  let sum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n\n    if (i >= period) {\n      sum -= values[i - period];\n      result[i] = sum / period;\n    } else {\n      result[i] = sum / (i + 1);\n    }\n  }\n\n  return result;\n}\n\n// Export full name\nexport { sma as simpleMovingAverage };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, divideBy, subtract } from '../../helper/numArray';\nimport { sma } from '../trend/simpleMovingAverage';\n\n/**\n * Optional configuration of AO parameters.\n */\nexport interface AOConfig {\n  fast?: number;\n  slow?: number;\n}\n\n/**\n * The default configuration of AO.\n */\nexport const AODefaultConfig: Required<AOConfig> = {\n  fast: 5,\n  slow: 34,\n};\n\n/**\n * Awesome Oscillator (AO).\n *\n * Median Price = ((Low + High) / 2).\n * AO = 5-Period SMA - 34-Period SMA.\n *\n * @param highs high values.\n * @param lows low values.\n * @param config configuration.\n * @return awesome oscillator.\n */\nexport function ao(\n  highs: number[],\n  lows: number[],\n  config: AOConfig = {}\n): number[] {\n  const { fast, slow } = { ...AODefaultConfig, ...config };\n  const medianPrice = divideBy(2, add(lows, highs));\n  const smaFast = sma(medianPrice, { period: fast });\n  const smaSlow = sma(medianPrice, { period: slow });\n  const result = subtract(smaFast, smaSlow);\n  return result;\n}\n\n// Export full name\nexport { ao as awesomeOscillator };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport {\n  AOConfig,\n  AODefaultConfig,\n  ao,\n} from '../../indicator/momentum/awesomeOscillator';\n\n/**\n * Awesome oscillator strategy function.\n *\n * @param asset asset object.\n * @param config configuration.\n * @return strategy actions.\n */\nexport function aoStrategy(asset: Asset, config: AOConfig = {}): Action[] {\n  const strategyConfig = { ...AODefaultConfig, ...config };\n  const result = ao(asset.highs, asset.lows, strategyConfig);\n\n  return result.map((value) => {\n    if (value > 0) {\n      return Action.BUY;\n    } else if (value < 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n\n// Export full name\nexport { aoStrategy as awesomeOscillatorStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {checkSameLength, shiftLeftBy,} from '../../helper/numArray';\n\n/**\n * Ichimoku cloud result object.\n */\nexport interface IchimokuCloudResult {\n    tenkan: number[];\n    kijun: number[];\n    ssa: number[];\n    ssb: number[];\n    laggingSpan: number[];\n}\n\n/**\n * Optional configuration of Ichimoku cloud parameters.\n */\nexport interface IchimokuCloudConfig {\n    short?: number;\n    medium?: number;\n    long?: number;\n    close?: number;\n}\n\n/**\n * The default configuration of Ichimoku cloud.\n */\nexport const IchimokuCloudDefaultConfig: Required<IchimokuCloudConfig> = {\n    short: 9,\n    medium: 26,\n    long: 52,\n    close: 26,\n};\n\n/**\n * Returns a function calculating average price (max - min) / 2 based on period and projection\n *\n * @param period\n * @param highs\n * @param lows\n * @param projection\n */\nconst averagePriceReducer = ({period, highs, lows, projection = 0}: {\n    period: number,\n    highs: number[],\n    lows: number[],\n    projection?: number\n}) => (acc: number[], _: number, i: number) => {\n    if (i < period - 1) return [...acc, 0]\n    const from = i + 1 - period\n    const to = i - projection + 1\n    const max = Math.max(...highs.slice(from, to))\n    const min = Math.min(...lows.slice(from, to))\n    return [...acc, (max + min) / 2]\n}\n\n/**\n * Tenkan-sen (Conversion Line) = (9-Period High + 9-Period Low) / 2\n *\n * @param highs high values.\n * @param lows low values.\n * @param short short period.\n */\nconst calculateTenkanSen = ({highs, lows, short}: {\n    highs: number[],\n    lows: number[],\n    short: number\n}) => highs.reduce(averagePriceReducer({period: short, highs, lows}), [] as Array<number>)\n\n\n/**\n * Kijun-sen (Conversion Line) = (26-Period High + 26-Period Low) / 2\n *\n * @param highs high values.\n * @param lows low values.\n * @param medium mediym period.\n */\nconst calculateKijunSen = ({highs, lows, medium}: {\n    highs: number[],\n    lows: number[],\n    medium: number\n}) => highs.reduce(averagePriceReducer({period: medium, highs, lows}), [] as Array<number>)\n\n/**\n * Senkou Span A (Leading Span A) = (Tenkan-sen Line + Kijun-sen) / 2 projected 26 periods in the future\n *\n * @param tenkanSen Tenkan-sen values.\n * @param kijunSen Kijun-sen values.\n * @param medium medium period.\n */\nconst calculateSenkouSpanA = ({tenkanSen, kijunSen, medium}: {\n    tenkanSen: number[],\n    kijunSen: number[],\n    medium: number\n}) => {\n    const ssa = new Array<number>(kijunSen.length + medium).fill(0)\n    kijunSen.forEach((k, i) => {\n        if (k) ssa[i + medium] = (k + tenkanSen[i]) / 2\n    })\n    return ssa\n}\n\n/**\n * Senkou Span B (Leading Span B) = (52-Period High + 52-Period Low) / 2 projected 26 periods in the future\n *\n * @param highs high values.\n * @param lows low values.\n * @param long long period.\n * @param medium mediym period.\n */\nconst calculateSenkouSpanB = ({highs, lows, long, medium}: {\n    highs: number[],\n    lows: number[],\n    long: number,\n    medium: number\n}) => new Array<number>(highs.length + medium).fill(0).reduce(averagePriceReducer({\n    period: long + medium,\n    highs,\n    lows,\n    projection: medium\n}), [] as Array<number>)\n\n/**\n * Ichimoku Cloud. Also known as Ichimoku Kinko Hyo, is a versatile indicator\n * that defines support and resistence, identifies trend direction, gauges\n * momentum, and provides trading signals.\n *\n * Tenkan-sen (Conversion Line) = (9-Period High + 9-Period Low) / 2\n * Kijun-sen (Base Line) = (26-Period High + 26-Period Low) / 2\n * Senkou Span A (Leading Span A) = (Conversion Line + Base Line) / 2 projected 26 periods in the future\n * Senkou Span B (Leading Span B) = (52-Period High + 52-Period Low) / 2 projected 26 periods in the future\n * Chikou Span (Lagging Span) = Closing plotted 26 periods in the past.\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param config configuration.\n * @return ichimoku cloud result object.\n */\nexport function ichimokuCloud(\n    highs: number[],\n    lows: number[],\n    closings: number[],\n    config: IchimokuCloudConfig = {}\n): IchimokuCloudResult {\n    checkSameLength(highs, lows, closings);\n\n    const {short, medium, long, close} = {\n        ...IchimokuCloudDefaultConfig,\n        ...config,\n    };\n\n    const tenkan = calculateTenkanSen({highs, lows, short})\n    const kijun = calculateKijunSen({highs, lows, medium})\n\n    return {\n        tenkan,\n        kijun,\n        ssa: calculateSenkouSpanA({tenkanSen: tenkan, kijunSen: kijun, medium}),\n        ssb: calculateSenkouSpanB({highs, lows, medium, long}),\n        laggingSpan: shiftLeftBy(close, closings),\n    };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {Asset} from '../asset';\nimport {Action} from '../action';\nimport {ichimokuCloud, IchimokuCloudConfig, IchimokuCloudDefaultConfig,} from '../../indicator/momentum/ichimokuCloud';\n\n/**\n * Ichimoku cloud.\n *\n * @param asset asset object.\n * @oaram config configuration.\n * @return strategy actions.\n */\nexport function ichimokuCloudStrategy(\n  asset: Asset,\n  config: IchimokuCloudConfig = {}\n): Action[] {\n  const strategyConfig = { ...IchimokuCloudDefaultConfig, ...config };\n  const indicator = ichimokuCloud(\n    asset.highs,\n    asset.lows,\n    asset.closings,\n    strategyConfig\n  );\n\n  const actions = new Array<Action>(indicator.kijun.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (indicator.ssa[i] > indicator.ssb[i]) {\n      actions[i] = Action.BUY;\n    } else if (indicator.ssa[i] < indicator.ssb[i]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Optional configuration of RMA parameters.\n */\nexport interface RMAConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of RMA.\n */\nexport const RMADefaultConfig: Required<RMAConfig> = {\n  period: 4,\n};\n\n/**\n * Rolling moving average (RMA).\n *\n * R[0] to R[p-1] is SMA(values)\n * R[p] and after is R[i] = ((R[i-1]*(p-1)) + v[i]) / p\n *\n * @param values values array.\n * @param config configuration.\n * @returns RMA values.\n */\nexport function rma(values: number[], config: RMAConfig = {}): number[] {\n  const { period } = { ...RMADefaultConfig, ...config };\n  const result = new Array<number>(values.length);\n  let sum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    let count = i + 1;\n\n    if (i < period) {\n      sum += values[i];\n    } else {\n      sum = result[i - 1] * (period - 1) + values[i];\n      count = period;\n    }\n\n    result[i] = sum / count;\n  }\n\n  return result;\n}\n\n// Export full name\nexport { rma as rollingMovingAverage };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { rma } from '../trend/rollingMovingAverage';\n\n/**\n * Optional configuration of RSI parameters.\n */\nexport interface RSIConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of RSI.\n */\nexport const RSIDefaultConfig: Required<RSIConfig> = {\n  period: 14,\n};\n\n/**\n * Relative Strength Index (RSI). It is a momentum indicator that measures the magnitude of\n * recent price changes to evaluate overbought and oversold conditions\n * using the given window period.\n *\n * RS = Average Gain / Average Loss\n * RSI = 100 - (100 / (1 + RS))\n *\n * @param closings closing values.\n * @param config configuration.\n * @return rsi values.\n */\nexport function rsi(closings: number[], config: RSIConfig = {}): number[] {\n  const { period } = { ...RSIDefaultConfig, ...config };\n  const gains = new Array<number>(closings.length);\n  const losses = new Array<number>(closings.length);\n\n  gains[0] = losses[0] = 0;\n\n  for (let i = 1; i < closings.length; i++) {\n    const difference = closings[i] - closings[i - 1];\n\n    if (difference > 0) {\n      gains[i] = difference;\n      losses[i] = 0;\n    } else {\n      losses[i] = -difference;\n      gains[i] = 0;\n    }\n  }\n\n  const meanGains = rma(gains, { period });\n  const meanLosses = rma(losses, { period });\n\n  const rValue = new Array<number>(closings.length);\n  const rsValue = new Array<number>(closings.length);\n\n  rValue[0] = rsValue[0] = 0;\n\n  for (let i = 1; i < closings.length; i++) {\n    rsValue[i] = meanGains[i] / meanLosses[i];\n    rValue[i] = 100 - 100 / (1 + rsValue[i]);\n  }\n\n  return rValue;\n}\n\n// Export full name\nexport { rsi as relativeStrengthIndex };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { rsi } from '../../indicator/momentum/relativeStrengthIndex';\n\n/**\n * RSI 2. When 2-period RSI moves below 10, it is considered deeply oversold,\n * and the other way around when moves above 90.\n *\n * @param asset asset object.\n * @returns strategy actions.\n */\nexport function rsi2Strategy(asset: Asset): Action[] {\n  const indicator = rsi(asset.closings, { period: 2 });\n\n  const actions = new Array<Action>(indicator.length);\n  for (let i = 0; i < actions.length; i++) {\n    if (indicator[i] < 10) {\n      actions[i] = Action.BUY;\n    } else if (indicator[i] > 90) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Tree node.\n */\ninterface TreeNode {\n  value: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n}\n\n/**\n * Tree result info object.\n */\ninterface TreeNodeInfo {\n  node: TreeNode | null;\n  parent: TreeNode | null;\n}\n\n/**\n * Binary search tree object.\n */\nexport class BinarySearchTree {\n  private root: TreeNode | null = null;\n\n  /**\n   * Inserts the given value.\n   * @param value numeric value.\n   */\n  insert(value: number): void {\n    const node: TreeNode = {\n      value: value,\n      left: null,\n      right: null,\n    };\n\n    if (this.root === null) {\n      this.root = node;\n      return;\n    }\n\n    let current = this.root;\n    let found = false;\n\n    while (!found) {\n      if (node.value <= current.value) {\n        if (current.left === null) {\n          current.left = node;\n          found = true;\n        } else {\n          current = current.left;\n        }\n      } else {\n        if (current.right === null) {\n          current.right = node;\n          found = true;\n        } else {\n          current = current.right;\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes the given value.\n   * @param value numeric value.\n   * @return value removed.\n   */\n  remove(value: number): boolean {\n    const info: TreeNodeInfo = {\n      node: this.root,\n      parent: null,\n    };\n\n    while (info.node !== null) {\n      if (value === info.node.value) {\n        this.removeNode(info);\n        return true;\n      } else {\n        info.parent = info.node;\n\n        if (value < info.node.value) {\n          info.node = info.node.left;\n        } else {\n          info.node = info.node.right;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Min value.\n   * @return min value.\n   */\n  min(): number {\n    const minInfo = BinarySearchTree.minNode(this.root);\n    if (minInfo.node === null) {\n      throw new Error('Tree empty');\n    }\n\n    return minInfo.node.value;\n  }\n\n  /**\n   * Max value.\n   * @return max value.\n   */\n  max(): number {\n    const maxInfo = BinarySearchTree.maxNode(this.root);\n    if (maxInfo.node === null) {\n      throw new Error('Tree empty');\n    }\n\n    return maxInfo.node?.value;\n  }\n\n  /**\n   * Removes the node info.\n   * @param info node info.\n   */\n  private removeNode(info: TreeNodeInfo) {\n    if (info.node === null) {\n      return;\n    }\n\n    if (info.node.left !== null && info.node.right !== null) {\n      const minInfo = BinarySearchTree.minNode(info.node.right);\n      if (minInfo.parent === null) {\n        minInfo.parent = info.node;\n      }\n\n      this.removeNode(minInfo);\n      if (minInfo.node !== null) {\n        info.node.value = minInfo.node.value;\n      }\n    } else {\n      let child: TreeNode | null = null;\n\n      if (info.node.left !== null) {\n        child = info.node.left;\n      } else {\n        child = info.node.right;\n      }\n\n      if (info.parent === null) {\n        this.root = child;\n      } else if (info.parent.left === info.node) {\n        info.parent.left = child;\n      } else {\n        info.parent.right = child;\n      }\n    }\n  }\n\n  /**\n   * Min node function returns the min node and its parent.\n   * @param root root node.\n   * @return node info.\n   */\n  private static minNode(root: TreeNode | null): TreeNodeInfo {\n    const info: TreeNodeInfo = {\n      node: null,\n      parent: null,\n    };\n\n    if (root !== null) {\n      info.node = root;\n\n      while (info.node.left !== null) {\n        info.parent = info.node;\n        info.node = info.node.left;\n      }\n    }\n\n    return info;\n  }\n\n  /**\n   * Max node funection returns the mac node and its parent.\n   * @param root root node.\n   * @return node info.\n   */\n  private static maxNode(root: TreeNode | null): TreeNodeInfo {\n    const info: TreeNodeInfo = {\n      node: null,\n      parent: null,\n    };\n\n    if (root !== null) {\n      info.node = root;\n\n      while (info.node.right !== null) {\n        info.parent = info.node;\n        info.node = info.node.right;\n      }\n    }\n\n    return info;\n  }\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { BinarySearchTree } from '../../helper/binarySearchTree';\n\n/**\n * Optional configuration of MMin parameters.\n */\nexport interface MMinConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of MMin.\n */\nexport const MMinDefaultConfig: Required<MMinConfig> = {\n  period: 4,\n};\n\n/**\n * Moving min for the given period.\n * @param values values array.\n * @param config configuration.\n * @return moving min.\n */\nexport function mmin(values: number[], config: MMinConfig = {}): number[] {\n  const { period } = { ...MMinDefaultConfig, ...config };\n  const result = new Array<number>(values.length);\n  const bst = new BinarySearchTree();\n\n  for (let i = 0; i < values.length; i++) {\n    bst.insert(values[i]);\n\n    if (i >= period) {\n      bst.remove(values[i - period]);\n    }\n\n    result[i] = bst.min();\n  }\n\n  return result;\n}\n\n// Export full name\nexport { mmin as movingMin };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { BinarySearchTree } from '../../helper/binarySearchTree';\n\n/**\n * Optional configuration of MMax parameters.\n */\nexport interface MMaxConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of MMax.\n */\nexport const MMaxDefaultConfig: Required<MMaxConfig> = {\n  period: 4,\n};\n\n/**\n * Moving max for the given period.\n * @param values values array.\n * @param config configuration.\n * @return moving max.\n */\nexport function mmax(values: number[], config: MMaxConfig = {}): number[] {\n  const { period } = { ...MMaxDefaultConfig, ...config };\n  const result = new Array<number>(values.length);\n  const bst = new BinarySearchTree();\n\n  for (let i = 0; i < values.length; i++) {\n    bst.insert(values[i]);\n\n    if (i >= period) {\n      bst.remove(values[i - period]);\n    }\n\n    result[i] = bst.max();\n  }\n\n  return result;\n}\n\n// Export full name\nexport { mmax as movingMax };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiplyBy, subtract } from '../../helper/numArray';\nimport { mmin } from '../trend/movingMin';\nimport { mmax } from '../trend/movingMax';\nimport { sma } from '../trend/simpleMovingAverage';\n\n/**\n * Stochastic oscillator result object.\n */\nexport interface StochResult {\n  k: number[];\n  d: number[];\n}\n\n/**\n * Optional configuration of stochastic oscillator parameters.\n */\nexport interface StochConfig {\n  kPeriod?: number;\n  dPeriod?: number;\n}\n\n/**\n * The default configuration of stochastic oscillator.\n */\nexport const StochDefaultConfig: Required<StochConfig> = {\n  kPeriod: 14,\n  dPeriod: 3,\n};\n\n/**\n * Stochastic Oscillator. It is a momentum indicator that shows the\n * location of the closing relative to high-low range over a\n * set number of periods.\n *\n * K = (Closing - Lowest Low) / (Highest High - Lowest Low) * 100\n * D = 3-Period SMA of K\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param config configuration.\n * @return stochastic oscillator result object.\n */\nexport function stoch(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  config: StochConfig = {}\n): StochResult {\n  const { kPeriod, dPeriod } = {\n    ...StochDefaultConfig,\n    ...config,\n  };\n  const highestHigh = mmax(highs, { period: kPeriod });\n  const lowestLow = mmin(lows, { period: kPeriod });\n\n  const kValue = multiplyBy(\n    100,\n    divide(subtract(closings, lowestLow), subtract(highestHigh, lowestLow))\n  );\n\n  const dValue = sma(kValue, { period: dPeriod });\n\n  return {\n    k: kValue,\n    d: dValue,\n  };\n}\n\n// Export full name\nexport { stoch as stochasticOscillator };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport {\n  StochConfig,\n  StochDefaultConfig,\n  stoch,\n} from '../../indicator/momentum/stochasticOscillator';\n\n/**\n * Stochastic oscillator strategy function.\n *\n * @param asset asset object.\n * @param config configuration.\n * @return strategy actions.\n */\nexport function stochStrategy(\n  asset: Asset,\n  config: StochConfig = {}\n): Action[] {\n  const strategyConfig = { ...StochDefaultConfig, ...config };\n  const result = stoch(asset.highs, asset.lows, asset.closings, strategyConfig);\n\n  const actions = new Array<Action>(result.k.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (result.k[i] >= 80 && result.d[i] >= 80) {\n      actions[i] = Action.SELL;\n    } else if (result.k[i] <= 20 && result.d[i] <= 20) {\n      actions[i] = Action.BUY;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n\n// Export full name\nexport { stochStrategy as stochasticOscillatorStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiplyBy, subtract } from '../../helper/numArray';\nimport { mmax } from '../trend/movingMax';\nimport { mmin } from '../trend/movingMin';\n\n/**\n * Optional configuration of Williams R parameters.\n */\nexport interface WillrConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of Williams R.\n */\nexport const WillrDefaultConfig: Required<WillrConfig> = {\n  period: 14,\n};\n\n/**\n * Williams R. Determine overbought and oversold.\n *\n * WR = (Highest High - Closing) / (Highest High - Lowest Low) * -100.\n *\n * Buy when -80 and below. Sell when -20 and above.\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param config configuration.\n * @return wr values.\n */\nexport function willr(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  config: WillrConfig = {}\n): number[] {\n  const { period } = { ...WillrDefaultConfig, ...config };\n  const highestHigh = mmax(highs, { period });\n  const lowestLow = mmin(lows, { period });\n  const result = multiplyBy(\n    -100,\n    divide(subtract(highestHigh, closings), subtract(highestHigh, lowestLow))\n  );\n\n  return result;\n}\n\n// Export full name\nexport { willr as williamsR };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport {\n  WillrConfig,\n  WillrDefaultConfig,\n  willr,\n} from '../../indicator/momentum/williamsR';\n\n/**\n * Williams R strategy function.\n *\n * @param asset asset object.\n * @param config configuration.\n * @return strategy actions.\n */\nexport function willRStrategy(\n  asset: Asset,\n  config: WillrConfig = {}\n): Action[] {\n  const strategyConfig = { ...WillrDefaultConfig, ...config };\n  const result = willr(asset.highs, asset.lows, asset.closings, strategyConfig);\n\n  return result.map((value) => {\n    if (value <= -80) {\n      return Action.BUY;\n    } else if (value >= -20) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n\n// Export full name\nexport { willRStrategy as williamsRStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Optional configuration of EMA parameters.\n */\nexport interface EMAConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of EMA.\n */\nexport const EMADefaultConfig: Required<EMAConfig> = {\n  period: 12,\n};\n\n/**\n * Exponential moving average (EMA).\n * @param values values array.\n * @param config configuration.\n * @return EMA values.\n */\nexport function ema(values: number[], config: EMAConfig = {}): number[] {\n  const { period } = { ...EMADefaultConfig, ...config };\n  const result = new Array<number>(values.length);\n\n  if (result.length > 0) {\n    const kValue = 2 / (1 + period);\n    const mValue = 1 - kValue;\n\n    result[0] = values[0];\n\n    for (let i = 1; i < result.length; i++) {\n      result[i] = values[i] * kValue + result[i - 1] * mValue;\n    }\n  }\n\n  return result;\n}\n\n// Export full name\nexport { ema as exponentialMovingAverage };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { subtract } from '../../helper/numArray';\nimport { ema } from './exponentialMovingAverage';\n\n/**\n * Optional configuration of APO parameters.\n */\nexport interface APOConfig {\n  fast?: number;\n  slow?: number;\n}\n\n/**\n * The default configuration of APO.\n */\nexport const APODefaultConfig: Required<APOConfig> = {\n  fast: 14,\n  slow: 30,\n};\n\n/**\n * Absolute Price Oscillator (APO) function calculates the technical indicator\n * that is used to follow trends. APO crossing above zero indicates bullish,\n * while crossing below zero indicates bearish. Positive value is upward\n * trend, while negative value is downward trend.\n *\n * Fast = EMA(fastPeriod, values)\n * Slow = EMA(slowPeriod, values)\n * APO = Fast - Slow\n *\n * @param values values array.\n * @param config configuration.\n * @return apo array.\n */\nexport function apo(values: number[], config: APOConfig = {}): number[] {\n  const { fast: fastPeriod, slow: slowPeriod } = {\n    ...APODefaultConfig,\n    ...config,\n  };\n  const fast = ema(values, { period: fastPeriod });\n  const slow = ema(values, { period: slowPeriod });\n  const result = subtract(fast, slow);\n\n  return result;\n}\n\n// Export full name\nexport { apo as absolutePriceOscillator };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport {\n  APOConfig,\n  APODefaultConfig,\n  apo,\n} from '../../indicator/trend/absolutePriceOscillator';\n\n/**\n * Absolute Price Oscillator (APO) strategy function.\n *\n * @param asset asset object.\n * @param config configuration.\n * @return strategy actions.\n */\nexport function apoStrategy(asset: Asset, config: APOConfig = {}): Action[] {\n  const { fast, slow } = {\n    ...APODefaultConfig,\n    ...config,\n  };\n  const result = apo(asset.closings, { fast, slow });\n  const actions = new Array<Action>(result.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (result[i] > 0) {\n      actions[i] = Action.BUY;\n    } else if (result[i] < 0) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n\n// Export full name\nexport { apoStrategy as absolutePriceOscillatorStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Since value is changed.\n * @param values values array.\n * @return since changed.\n */\nexport function since(values: number[]): number[] {\n  const result = new Array<number>(values.length);\n\n  if (values.length > 0) {\n    let last = null;\n    let count = 0;\n\n    for (let i = 0; i < values.length; i++) {\n      if (last !== values[i]) {\n        last = values[i];\n        count = 0;\n      } else {\n        count++;\n      }\n\n      result[i] = count;\n    }\n  }\n\n  return result;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  addBy,\n  checkSameLength,\n  divideBy,\n  multiplyBy,\n} from '../../helper/numArray';\nimport { since } from './since';\nimport { mmin } from './movingMin';\nimport { mmax } from './movingMax';\n\n/**\n * Aroon result.\n */\nexport interface AroonResult {\n  up: number[];\n  down: number[];\n}\n\n/**\n * Optional configuration of Aroon parameters.\n */\nexport interface AroonConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of Aroon.\n */\nexport const AroonDefaultConfig: Required<AroonConfig> = {\n  period: 25,\n};\n\n/**\n * Aroon Indicator. It is a technical indicator that is used to identify trend changes\n * in the price of a stock, as well as the strength of that trend. It consists of two\n * lines, Arron Up, and Aroon Down. The Aroon Up line measures the strength of the\n * uptrend, and the Aroon Down measures the strength of the downtrend. When Aroon Up\n * is above Aroon Down, it indicates bullish price, and when Aroon Down is above\n * Aroon Up, it indicates bearish price.\n *\n * Aroon Up = ((25 - Period Since Last 25 Period High) / 25) * 100\n * Aroon Down = ((25 - Period Since Last 25 Period Low) / 25) * 100\n *\n * @param highs highs values.\n * @param lows lows values.\n * @param config configuration.\n * @return aroon result.\n */\nexport function aroon(\n  highs: number[],\n  lows: number[],\n  config: AroonConfig = {}\n): AroonResult {\n  checkSameLength(highs, lows);\n\n  const { period } = { ...AroonDefaultConfig, ...config };\n\n  const sinceLastHigh = since(mmax(highs, { period }));\n  const sinceLastLow = since(mmin(lows, { period }));\n\n  const up = multiplyBy(\n    100,\n    divideBy(period, addBy(period, multiplyBy(-1, sinceLastHigh)))\n  );\n\n  const down = multiplyBy(\n    100,\n    divideBy(period, addBy(period, multiplyBy(-1, sinceLastLow)))\n  );\n\n  return {\n    up,\n    down,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport {\n  AroonConfig,\n  AroonDefaultConfig,\n  aroon,\n} from '../../indicator/trend/aroon';\n\n/**\n * Aroon strategy.\n * @param asset asset object.\n * @param config configuration.\n * @return strategy actions.\n */\nexport function aroonStrategy(\n  asset: Asset,\n  config: AroonConfig = {}\n): Action[] {\n  const strategyConfig = { ...AroonDefaultConfig, ...config };\n  const indicator = aroon(asset.highs, asset.lows, strategyConfig);\n\n  const actions = new Array<Action>(indicator.up.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (indicator.up[i] > indicator.down[i]) {\n      actions[i] = Action.BUY;\n    } else if (indicator.down[i] > indicator.up[i]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, subtract } from '../../helper/numArray';\n\n/**\n * The Balance of Power (BOP) function calculates the strength of buying and\n * selling pressure. Positive value indicates an upward trend, and negative\n * value indicates a downward trend. Zero indicates a balance between\n * the two.\n *\n * BOP = (Closing - Opening) / (High - Low)\n *\n * @param openings opening values.\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return balance of power values.\n */\nexport function bop(\n  openings: number[],\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): number[] {\n  return divide(subtract(closings, openings), subtract(highs, lows));\n}\n\n// Export full name\nexport { bop as balanceOfPower };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { bop } from '../../indicator/trend/balanceOfPower';\n\n/**\n * Balance of power strategy.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function bopStrategy(asset: Asset): Action[] {\n  const result = bop(asset.openings, asset.highs, asset.lows, asset.closings);\n\n  return result.map((value) => {\n    if (value > 0) {\n      return Action.BUY;\n    } else if (value < 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n\n// Export full name\nexport { bopStrategy as balanceOfPowerStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, addBy, checkSameLength, multiply, multiplyBy } from './numArray';\n\n/**\n * Least square result object.\n */\nexport interface LeastSquareResult {\n  m: number;\n  b: number;\n}\n\n/**\n * Moving least square result.\n */\nexport interface MovingLeastSquareResult {\n  m: number[];\n  b: number[];\n}\n\n/**\n * Least square.\n *\n * y = mx + b\n * b = y-intercept\n * y = slope\n *\n * m = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX)\n * b = (sumY - m * sumX) / n\n *\n * @param x x values.\n * @param y y values.\n * @return least square result object.\n */\nexport function leastSquare(x: number[], y: number[]): LeastSquareResult {\n  checkSameLength(x, y);\n\n  let sumX = 0;\n  let sumX2 = 0;\n  let sumY = 0;\n  let sumXY = 0;\n\n  for (let i = 0; i < x.length; i++) {\n    sumX += x[i];\n    sumX2 += x[i] * x[i];\n    sumY += y[i];\n    sumXY += x[i] * y[i];\n  }\n\n  const n = x.length;\n  const m = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n  const b = (sumY - m * sumX) / n;\n\n  return {\n    m,\n    b,\n  };\n}\n\n/**\n * Moving least square over a period.\n *\n * y = mx + b\n * b = y-intercept\n * y = slope\n *\n * m = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX)\n * b = (sumY - m * sumX) / n\n *\n * @param period window period.\n * @param x x values.\n * @param y y values.\n * @return moving least square result.\n */\nexport function movingLeastSquare(\n  period: number,\n  x: number[],\n  y: number[]\n): MovingLeastSquareResult {\n  checkSameLength(x, y);\n\n  const m = new Array<number>(x.length);\n  const b = new Array<number>(x.length);\n\n  let sumX = 0;\n  let sumX2 = 0;\n  let sumY = 0;\n  let sumXY = 0;\n\n  for (let i = 0; i < x.length; i++) {\n    sumX += x[i];\n    sumX2 += x[i] * x[i];\n    sumY += y[i];\n    sumXY += x[i] * y[i];\n\n    let n = i + 1;\n\n    if (i >= period) {\n      sumX -= x[i - period];\n      sumX2 -= x[i - period] * x[i - period];\n      sumY -= y[i - period];\n      sumXY -= x[i - period] * y[i - period];\n      n = period;\n    }\n\n    if (i > 0) {\n      m[i] = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n      b[i] = (sumY - m[i] * sumX) / n;\n    } else {\n      m[i] = 0;\n      b[i] = 0;\n    }\n  }\n\n  return {\n    m,\n    b,\n  };\n}\n\n/**\n * Linear regression using least square method.\n *\n * y = mx + b\n *\n * @param x x values.\n * @param y y values.\n * @return regression values.\n */\nexport function linearRegressionUsingLeastSquare(\n  x: number[],\n  y: number[]\n): number[] {\n  const ls = leastSquare(x, y);\n  const lr = addBy(ls.b, multiplyBy(ls.m, x));\n  return lr;\n}\n\n/**\n * Moving linear regression using least square.\n *\n * y = mx + b\n *\n * @param period window period.\n * @param x x values.\n * @param y y values.\n * @return regression values.\n */\nexport function movingLinearRegressionUsingLeastSquare(\n  period: number,\n  x: number[],\n  y: number[]\n): number[] {\n  const ls = movingLeastSquare(period, x, y);\n  const lr = add(multiply(ls.m, x), ls.b);\n  return lr;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  divide,\n  generateNumbers,\n  multiplyBy,\n  subtract,\n} from '../../helper/numArray';\nimport {\n  linearRegressionUsingLeastSquare,\n  movingLinearRegressionUsingLeastSquare,\n} from '../../helper/regression';\n\n/**\n * Optional configuration of Chande forecast oscillator parameters.\n */\nexport interface CFOConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of Chande forecast oscillator.\n */\nexport const CFODefaultConfig: Required<CFOConfig> = {\n  period: 4,\n};\n\n/**\n * The Chande Forecast Oscillator developed by Tushar Chande The Forecast\n * Oscillator plots the percentage difference between the closing price and\n * the n-period linear regression forecasted price. The oscillator is above\n * zero when the forecast price is greater than the closing price and less\n * than zero if it is below.\n *\n * R = Linreg(Closing)\n * CFO = ((Closing - R) / Closing) * 100\n *\n * @param closings closing values.\n * @return cfo values.\n */\nexport function cfo(closings: number[]): number[] {\n  const x = generateNumbers(0, closings.length, 1);\n  const r = linearRegressionUsingLeastSquare(x, closings);\n  const result = multiplyBy(100, divide(subtract(closings, r), closings));\n\n  return result;\n}\n\n// Export full name\nexport { cfo as chandeForecastOscillator };\n\n/**\n * Optional configuration of moving Chande forecast oscillator parameters.\n */\nexport interface MCFOConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of moving Chande forecast oscillator.\n */\nexport const MCFODefaultConfig: Required<MCFOConfig> = {\n  period: 4,\n};\n\n/**\n * Moving Chande Forecast Oscillator calculates based on\n * the given period.\n *\n * The Chande Forecast Oscillator developed by Tushar Chande The Forecast\n * Oscillator plots the percentage difference between the closing price and\n * the n-period linear regression forecasted price. The oscillator is above\n * zero when the forecast price is greater than the closing price and less\n * than zero if it is below.\n *\n * R = Linreg(Closing)\n * CFO = ((Closing - R) / Closing) * 100\n *\n * @param closings closing values.\n * @param config configuration.\n * @return moving cfo.\n */\nexport function mcfo(closings: number[], config: MCFOConfig = {}): number[] {\n  const { period } = { ...MCFODefaultConfig, ...config };\n  const xVal = generateNumbers(0, closings.length, 1);\n  const rVal = movingLinearRegressionUsingLeastSquare(period, xVal, closings);\n  const result = multiplyBy(100, divide(subtract(closings, rVal), closings));\n\n  return result;\n}\n\n// Export full name\nexport { mcfo as movingChandeForecastOscillator };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { cfo } from '../../indicator/trend/chandeForecastOscillator';\n\n/**\n * Chande forecast oscillator strategy.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function cfoStrategy(asset: Asset): Action[] {\n  const result = cfo(asset.closings);\n\n  return result.map((value) => {\n    if (value > 0) {\n      return Action.BUY;\n    } else if (value < 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n\n// Export full name\nexport { cfoStrategy as chandeForecastOscillatorStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiplyBy, subtract } from '../../helper/numArray';\nimport { mmin } from './movingMin';\nimport { mmax } from './movingMax';\nimport { sma } from './simpleMovingAverage';\n\n/**\n * KDJ result.\n */\nexport interface KDJResult {\n  k: number[];\n  d: number[];\n  j: number[];\n}\n\n/**\n * Optional configuration of KDJ parameters.\n */\nexport interface KDJConfig {\n  rPeriod?: number;\n  kPeriod?: number;\n  dPeriod?: number;\n}\n\n/**\n * The default configuration of KDJ.\n */\nexport const KDJDefaultConfig: Required<KDJConfig> = {\n  rPeriod: 9,\n  kPeriod: 3,\n  dPeriod: 3,\n};\n\n/**\n * The kdj function calculates the KDJ indicator, also known as\n * the Random Index. KDJ is calculated similar to the Stochastic\n * Oscillator with the difference of having the J line. It is\n * used to analyze the trend and entry points.\n *\n * The K and D lines show if the asset is overbought when they\n * crosses above 80%, and oversold when they crosses below\n * 20%. The J line represents the divergence.\n *\n * RSV = ((Closing - Min(Low, rPeriod))\n *       / (Max(High, rPeriod) - Min(Low, rPeriod))) * 100\n * K = Sma(RSV, kPeriod)\n * D = Sma(K, dPeriod)\n * J = (3 * K) - (2 * D)\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param config configuration.\n * @return kdj result.\n */\nexport function kdj(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  config: KDJConfig = {}\n): KDJResult {\n  const { rPeriod, kPeriod, dPeriod } = { ...KDJDefaultConfig, ...config };\n  const highest = mmax(highs, { period: rPeriod });\n  const lowest = mmin(lows, { period: rPeriod });\n\n  const rsv = multiplyBy(\n    100,\n    divide(subtract(closings, lowest), subtract(highest, lowest))\n  );\n\n  const kValue = sma(rsv, { period: kPeriod });\n  const dValue = sma(kValue, { period: dPeriod });\n  const jValue = subtract(multiplyBy(3, kValue), multiplyBy(2, dValue));\n\n  return {\n    k: kValue,\n    d: dValue,\n    j: jValue,\n  };\n}\n\n// Export full name\nexport { kdj as randomIndex };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport {\n  KDJConfig,\n  KDJDefaultConfig,\n  kdj,\n} from '../../indicator/trend/randomIndex';\n\n/**\n * KDJ strategy.\n * @param asset asset object.\n * @param config configuration.\n * @return strategy actions.\n */\nexport function kdjStrategy(asset: Asset, config: KDJConfig = {}): Action[] {\n  const strategyConfig = { ...KDJDefaultConfig, ...config };\n  const kdjResult = kdj(\n    asset.highs,\n    asset.lows,\n    asset.closings,\n    strategyConfig\n  );\n  const actions = new Array<Action>(kdjResult.k.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (kdjResult.k[i] > kdjResult.d[i] && kdjResult.k[i] <= 20) {\n      actions[i] = Action.BUY;\n    } else if (kdjResult.k[i] < kdjResult.d[i] && kdjResult.k[i] >= 80) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { subtract } from '../../helper/numArray';\nimport { ema } from './exponentialMovingAverage';\n\nexport interface MACDResult {\n  macdLine: number[];\n  signalLine: number[];\n}\n\n/**\n * Optional configuration of MACD parameters.\n */\nexport interface MACDConfig {\n  fast?: number;\n  slow?: number;\n  signal?: number;\n}\n\n/**\n * The default configuration of MACD.\n */\nexport const MACDDefaultConfig: Required<MACDConfig> = {\n  fast: 12,\n  slow: 26,\n  signal: 9,\n};\n\n/**\n * Moving Average Convergence Divergence (MACD).\n *\n * MACD = 12-Period EMA - 26-Period EMA.\n * Signal = 9-Period EMA of MACD.\n *\n * @param closings closing values.\n * @param config configuration.\n * @return macd result.\n */\nexport function macd(closings: number[], config: MACDConfig = {}): MACDResult {\n  const { fast, slow, signal } = {\n    ...MACDDefaultConfig,\n    ...config,\n  };\n  const emaFast = ema(closings, { period: fast });\n  const emaSlow = ema(closings, { period: slow });\n\n  const macdLine = subtract(emaFast, emaSlow);\n  const signalLine = ema(macdLine, { period: signal });\n\n  return {\n    macdLine,\n    signalLine,\n  };\n}\n\n// Export full name\nexport { macd as movingAverageConvergenceDivergence };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport {\n  MACDConfig,\n  MACDDefaultConfig,\n  macd,\n} from '../../indicator/trend/movingAverageConvergenceDivergence';\n\n/**\n * MACD strategy.\n * @param asset asset object.\n * @param config configuration.\n * @return strategy actions.\n */\nexport function macdStrategy(asset: Asset, config: MACDConfig = {}): Action[] {\n  const strategyConfig = { ...MACDDefaultConfig, ...config };\n  const result = macd(asset.closings, strategyConfig);\n  const actions = new Array<number>(result.macdLine.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (result.macdLine[i] > result.signalLine[i]) {\n      actions[i] = Action.BUY;\n    } else if (result.macdLine[i] < result.signalLine[i]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n\n// Export full name\nexport { macdStrategy as movingAverageConvergenceDivergenceStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Indicator trend.\n */\nexport enum Trend {\n  FALLING = -1,\n  STABLE = 0,\n  RISING = 1,\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { checkSameLength } from '../../helper/numArray';\nimport { Trend } from '../types';\n\n/**\n * Parabolic SAR result object.\n */\nexport interface PSARResult {\n  trends: Trend[];\n  psarResult: number[];\n}\n\n/**\n * Optional configuration of parabolic SAR parameters.\n */\nexport interface PSARConfig {\n  step?: number;\n  max?: number;\n}\n\n/**\n * The default configuration of parabolic SAR.\n */\nexport const PSARDefaultConfig: Required<PSARConfig> = {\n  step: 0.02,\n  max: 0.2,\n};\n\n/**\n * Parabolic SAR. It is a popular technical indicator for identifying the trend\n * and as a trailing stop.\n *\n * PSAR = PSAR[i - 1] - ((PSAR[i - 1] - EP) * AF)\n *\n * If the trend is Falling:\n *  - PSAR is the maximum of PSAR or the previous two high values.\n *  - If the current high is greather than or equals to PSAR, use EP.\n *\n * If the trend is Rising:\n *  - PSAR is the minimum of PSAR or the previous two low values.\n *  - If the current low is less than or equals to PSAR, use EP.\n *\n * If PSAR is greater than the closing, trend is falling, and the EP\n * is set to the minimum of EP or the low.\n *\n * If PSAR is lower than or equals to the closing, trend is rising, and the EP\n * is set to the maximum of EP or the high.\n *\n * If the trend is the same, and AF is less than 0.20, increment it by 0.02.\n * If the trend is not the same, set AF to 0.02.\n *\n * Based on video https://www.youtube.com/watch?v=MuEpGBAH7pw&t=0s.\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param config configuration.\n * @return psar result.\n */\nexport function psar(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  config: PSARConfig = {}\n): PSARResult {\n  checkSameLength(highs, lows, closings);\n\n  const { step, max } = {\n    ...PSARDefaultConfig,\n    ...config,\n  };\n  const trends = new Array<Trend>(highs.length);\n  const psarResult = new Array<number>(highs.length);\n\n  trends[0] = Trend.FALLING;\n  psarResult[0] = highs[0];\n\n  let af = step;\n  let ep = lows[0];\n\n  for (let i = 1; i < psarResult.length; i++) {\n    psarResult[i] = psarResult[i - 1] - (psarResult[i - 1] - ep) * af;\n\n    if (trends[i - 1] === Trend.FALLING) {\n      psarResult[i] = Math.max(psarResult[i], highs[i - 1]);\n      if (i > 1) {\n        psarResult[i] = Math.max(psarResult[i], highs[i - 2]);\n      }\n\n      if (highs[i] >= psarResult[i]) {\n        psarResult[i] = ep;\n      }\n    } else {\n      psarResult[i] = Math.min(psarResult[i], lows[i - 1]);\n      if (i > 1) {\n        psarResult[i] = Math.min(psarResult[i], lows[i - 2]);\n      }\n\n      if (lows[i] <= psarResult[i]) {\n        psarResult[i] = ep;\n      }\n    }\n\n    const prevEp = ep;\n\n    if (psarResult[i] > closings[i]) {\n      trends[i] = Trend.FALLING;\n      ep = Math.min(ep, lows[i]);\n    } else {\n      trends[i] = Trend.RISING;\n      ep = Math.max(ep, highs[i]);\n    }\n\n    if (trends[i] !== trends[i - 1]) {\n      af = step;\n    } else if (prevEp !== ep && af < max) {\n      af += step;\n    }\n  }\n\n  return {\n    trends,\n    psarResult,\n  };\n}\n\n// Export full name\nexport { psar as parabolicSAR };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport {\n  PSARConfig,\n  PSARDefaultConfig,\n  psar,\n} from '../../indicator/trend/parabolicSar';\nimport { Trend } from '../../indicator/types';\n\n/**\n * Parabolic SAR strategy function.\n *\n * @param asset asset object.\n * @param config configuration.\n * @return strategy actions.\n */\nexport function psarStrategy(asset: Asset, config: PSARConfig = {}): Action[] {\n  const strategyConfig = { ...PSARDefaultConfig, ...config };\n  const result = psar(asset.highs, asset.lows, asset.closings, strategyConfig);\n\n  return result.trends.map((trend) => {\n    switch (trend) {\n      case Trend.FALLING:\n        return Action.SELL;\n      case Trend.RISING:\n        return Action.BUY;\n      case Trend.STABLE:\n        return Action.HOLD;\n      default:\n        return Action.HOLD;\n    }\n  });\n}\n\n// Export full name\nexport { psarStrategy as parabolicSARStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, divideBy } from '../../helper/numArray';\n\n/**\n * The Typical Price. It is another approximation of\n * average price for each period and can be used as\n * a filter for moving average systems.\n *\n * TPI = (High + Low + Closing) / 3\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return tpi values.\n */\nexport function typprice(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): number[] {\n  return divideBy(3, add(add(highs, lows), closings));\n}\n\n// Export full name\nexport { typprice as typicalPrice };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { typprice } from '../../indicator/trend/typicalPrice';\n\n/**\n * Typical price strategy function.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function typpriceStrategy(asset: Asset): Action[] {\n  const result = typprice(asset.highs, asset.lows, asset.closings);\n\n  const actions = new Array<Action>(result.length);\n  actions[0] = Action.HOLD;\n\n  for (let i = 1; i < actions.length; i++) {\n    if (result[i] > result[i - 1]) {\n      actions[i] = Action.BUY;\n    } else if (result[i] < result[i - 1]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n\n// Export full name\nexport { typpriceStrategy as typicalPriceStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Optional configuration of moving sum parameters.\n */\nexport interface MSumConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of moving sum.\n */\nexport const MSumDefaultConfig: Required<MSumConfig> = {\n  period: 4,\n};\n\n/**\n * Moving sum of the given values.\n * @param values values array.\n * @param config configuration.\n * @return sum values.\n */\nexport function msum(values: number[], config: MSumConfig = {}): number[] {\n  const { period } = { ...MSumDefaultConfig, ...config };\n  const result = new Array<number>(values.length);\n  let sum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n\n    if (i >= period) {\n      sum -= values[i - period];\n    }\n\n    result[i] = sum;\n  }\n\n  return result;\n}\n\n// Export full name\nexport { msum as movingSum };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  abs,\n  checkSameLength,\n  divide,\n  max,\n  shiftRightBy,\n  subtract,\n} from '../../helper/numArray';\nimport { msum } from './movingSum';\n\n/**\n * Vortex result.\n */\nexport interface VortexResult {\n  plus: number[];\n  minus: number[];\n}\n\n/**\n * Optional configuration of vortex parameters.\n */\nexport interface VortexConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of vortex.\n */\nexport const VortexDefaultConfig: Required<VortexConfig> = {\n  period: 14,\n};\n\n/**\n * Vortex Indicator. It provides two oscillators that capture positive and\n * negative trend movement. A bullish signal triggers when the positive\n * trend indicator crosses above the negative trend indicator or a key\n * level. A bearish signal triggers when the negative trend indicator\n * crosses above the positive trend indicator or a key level.\n *\n * +VM = Abs(Current High - Prior Low)\n * -VM = Abs(Current Low - Prior High)\n *\n * +VM14 = 14-Period Sum of +VM\n * -VM14 = 14-Period Sum of -VM\n *\n * TR = Max((High[i]-Low[i]), Abs(High[i]-Closing[i-1]), Abs(Low[i]-Closing[i-1]))\n * TR14 = 14-Period Sum of TR\n *\n * +VI14 = +VM14 / TR14\n * -VI14 = -VM14 / TR14\n *\n * Based on https://school.stockcharts.com/doku.php?id=technical_indicators:vortex_indicator\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param config configuration.\n * @return vortex result.\n */\nexport function vortex(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  config: VortexConfig = {}\n): VortexResult {\n  checkSameLength(highs, lows, closings);\n\n  const { period } = { ...VortexDefaultConfig, ...config };\n  const prevClosings = shiftRightBy(1, closings);\n\n  const plusVm = abs(subtract(highs, shiftRightBy(1, lows)));\n  const minusVm = abs(subtract(lows, shiftRightBy(1, highs)));\n\n  const plusVmSum = msum(plusVm, { period });\n  const minusVmSum = msum(minusVm, { period });\n\n  const tr = max(\n    subtract(highs, lows),\n    abs(subtract(highs, prevClosings)),\n    abs(subtract(lows, prevClosings))\n  );\n\n  const trSum = msum(tr, { period });\n\n  const plus = divide(plusVmSum, trSum);\n  const minus = divide(minusVmSum, trSum);\n\n  return {\n    plus,\n    minus,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport {\n  VortexConfig,\n  VortexDefaultConfig,\n  vortex,\n} from '../../indicator/trend/vortex';\n\n/**\n * Vortex strategy.\n * @param asset asset object.\n * @param config configuration.\n * @return strategy actions.\n */\nexport function vortexStrategy(\n  asset: Asset,\n  config: VortexConfig = {}\n): Action[] {\n  const strategyConfig = { ...VortexDefaultConfig, ...config };\n  const indicator = vortex(\n    asset.highs,\n    asset.lows,\n    asset.closings,\n    strategyConfig\n  );\n\n  const actions = new Array<Action>(indicator.plus.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (indicator.plus[i] > indicator.minus[i]) {\n      actions[i] = Action.BUY;\n    } else if (indicator.plus[i] < indicator.minus[i]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  add,\n  addBy,\n  checkSameLength,\n  divide,\n  multiply,\n  multiplyBy,\n  subtract,\n} from '../../helper/numArray';\nimport { sma } from '../trend/simpleMovingAverage';\n\n/**\n * Acceleration bands result object.\n */\nexport interface ABResult {\n  upper: number[];\n  middle: number[];\n  lower: number[];\n}\n\n/**\n * Optional configuration of acceleration bands parameters.\n */\nexport interface ABConfig {\n  period?: number;\n  multiplier?: number;\n}\n\n/**\n * The default configuration of acceleration bands.\n */\nexport const ABDefaultConfig: Required<ABConfig> = {\n  period: 20,\n  multiplier: 4,\n};\n\n/**\n * Acceleration Bands. Plots upper and lower envelope bands\n * around a simple moving average.\n *\n * Upper Band = SMA(High * (1 + 4 * (High - Low) / (High + Low)))\n * Middle Band = SMA(Closing)\n * Lower Band = SMA(Low * (1 - 4 * (High - Low) / (High + Low)))\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param config configuration.\n * @return acceleration band.\n */\nexport function ab(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  config: ABConfig = {}\n): ABResult {\n  checkSameLength(highs, lows, closings);\n\n  const { period, multiplier } = { ...ABDefaultConfig, ...config };\n  const k = divide(subtract(highs, lows), add(highs, lows));\n\n  const upper = sma(multiply(highs, addBy(1, multiplyBy(multiplier, k))), {\n    period,\n  });\n  const middle = sma(closings, { period });\n  const lower = sma(multiply(lows, addBy(1, multiplyBy(-1 * multiplier, k))), {\n    period,\n  });\n\n  return {\n    upper,\n    middle,\n    lower,\n  };\n}\n\n// Export full name\nexport { ab as accelerationBands };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport {\n  ABConfig,\n  ABDefaultConfig,\n  ab,\n} from '../../indicator/volatility/accelerationBands';\n\n/**\n * Acceleration bands strategy function.\n *\n * @param asset asset object.\n * @param config configuration.\n * @return strategy actions.\n */\nexport function abStrategy(asset: Asset, config: ABConfig = {}): Action[] {\n  const strategyConfig = { ...ABDefaultConfig, ...config };\n  const result = ab(asset.highs, asset.lows, asset.closings, strategyConfig);\n\n  const actions = new Array<number>(result.upper.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (asset.closings[i] >= result.upper[i]) {\n      actions[i] = Action.BUY;\n    } else {\n      actions[i] = Action.SELL;\n    }\n  }\n\n  return actions;\n}\n\n// Export full name\nexport { abStrategy as accelerationBandsStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { sma } from '../trend/simpleMovingAverage';\n\n/**\n * Optional configuration of MSTD parameters.\n */\nexport interface MSTDConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of MSTD.\n */\nexport const MSTDDefaultConfig: Required<MSTDConfig> = {\n  period: 4,\n};\n\n/**\n * Moving strandard deviation function.\n *\n * @param values value array.\n * @param config configuration.\n * @return std values.\n */\nexport function mstd(values: number[], config: MSTDConfig = {}): number[] {\n  const { period } = { ...MSTDDefaultConfig, ...config };\n  const result = new Array<number>(values.length);\n  const averages = sma(values, { period });\n\n  for (let i = 0; i < values.length; i++) {\n    result[i] = 0;\n\n    if (i >= period - 1) {\n      let sum = 0;\n\n      for (let k = i - (period - 1); k <= i; k++) {\n        sum += (values[k] - averages[i]) * (values[k] - averages[i]);\n      }\n\n      result[i] = Math.sqrt(sum / period);\n    }\n  }\n\n  return result;\n}\n\n// Export full name\nexport { mstd as movingStandardDeviation };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, multiplyBy, subtract } from '../../helper/numArray';\nimport { sma } from '../trend/simpleMovingAverage';\nimport { mstd } from './movingStandardDeviation';\n\n/**\n * Bollinger bands result object.\n */\nexport interface BBResult {\n  upper: number[];\n  middle: number[];\n  lower: number[];\n}\n\n/**\n * Optional configuration of Bollinger bands parameters.\n */\nexport interface BBConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of Bollinger bands.\n */\nexport const BBDefaultConfig: Required<BBConfig> = {\n  period: 20,\n};\n\n/**\n * Bollinger Bands.\n *\n * Middle Band = 20-Period SMA.\n * Upper Band = 20-Period SMA + 2 (20-Period Std)\n * Lower Band = 20-Period SMA - 2 (20-Period Std)\n *\n * @param closings closing values.\n * @param config configuration.\n * @return bollinger bands.\n */\nexport function bb(closings: number[], config: BBConfig = {}): BBResult {\n  const { period } = { ...BBDefaultConfig, ...config };\n  const std2 = multiplyBy(2, mstd(closings, { period }));\n  const middle = sma(closings, { period });\n  const upper = add(middle, std2);\n  const lower = subtract(middle, std2);\n\n  return {\n    upper,\n    middle,\n    lower,\n  };\n}\n\n// Export full name\nexport { bb as bollingerBands };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport {\n  BBConfig,\n  BBDefaultConfig,\n  bb,\n} from '../../indicator/volatility/bollingerBands';\n\n/**\n * Bollinger bands strategy function.\n *\n * @param asset asset object.\n * @param config configuration.\n * @return strategy actions.\n */\nexport function bbStrategy(asset: Asset, config: BBConfig = {}): Action[] {\n  const strategyConfig = { ...BBDefaultConfig, ...config };\n  const result = bb(asset.closings, strategyConfig);\n\n  const actions = new Array<Action>(result.upper.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (asset.closings[i] > result.upper[i]) {\n      actions[i] = Action.SELL;\n    } else if (asset.closings[i] < result.lower[i]) {\n      actions[i] = Action.BUY;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n\n// Export full name\nexport { bbStrategy as bollingerBandsStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  add,\n  divide,\n  generateNumbers,\n  multiply,\n  multiplyBy,\n  subtract,\n} from '../../helper/numArray';\nimport { movingLeastSquare } from '../../helper/regression';\nimport { ema } from '../trend/exponentialMovingAverage';\nimport { mmax } from '../trend/movingMax';\nimport { mmin } from '../trend/movingMin';\n\n/**\n * Projection oscillator result object.\n */\nexport interface POResult {\n  poResult: number[];\n  spoResult: number[];\n}\n\n/**\n * Optional configuration of PO parameters.\n */\nexport interface POConfig {\n  period?: number;\n  smooth?: number;\n}\n\n/**\n * The default configuration of PO.\n */\nexport const PODefaultConfig: Required<POConfig> = {\n  period: 14,\n  smooth: 3,\n};\n\n/**\n * ProjectionOscillator calculates the Projection Oscillator (PO). The PO\n * uses the linear regression slope, along with highs and lows.\n *\n * Period defines the moving window to calculates the PO, and the smooth\n * period defines the moving windows to take EMA of PO.\n *\n * PL = Min(period, (high + MLS(period, x, high)))\n * PU = Max(period, (low + MLS(period, x, low)))\n * PO = 100 * (Closing - PL) / (PU - PL)\n * SPO = EMA(smooth, PO)\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param config configuration.\n * @return projection oscillator.\n */\nexport function po(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  config: POConfig = {}\n): POResult {\n  const { period, smooth } = {\n    ...PODefaultConfig,\n    ...config,\n  };\n  const x = generateNumbers(0, closings.length, 1);\n  const lsHighs = movingLeastSquare(period, x, highs);\n  const lsLows = movingLeastSquare(period, x, lows);\n\n  const vHighs = add(highs, multiply(lsHighs.m, x));\n  const vLows = add(lows, multiply(lsLows.m, x));\n\n  const pu = mmax(vHighs, { period });\n  const pl = mmin(vLows, { period });\n\n  const poResult = divide(\n    multiplyBy(100, subtract(closings, pl)),\n    subtract(pu, pl)\n  );\n  const spoResult = ema(poResult, { period: smooth });\n\n  return {\n    poResult,\n    spoResult,\n  };\n}\n\n// Export full name\nexport { po as projectionOscillator };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport {\n  POConfig,\n  PODefaultConfig,\n  po,\n} from '../../indicator/volatility/projectionOscillator';\n\n/**\n * Projection oscillator strategy function.\n *\n * @param asset asset object.\n * @param config configuration.\n * @return strategy actions.\n */\nexport function poStrategy(asset: Asset, config: POConfig = {}): Action[] {\n  const strategyConfig = { ...PODefaultConfig, ...config };\n  const result = po(asset.highs, asset.lows, asset.closings, strategyConfig);\n\n  const actions = new Array<Action>(result.poResult.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (result.poResult[i] > result.spoResult[i]) {\n      actions[i] = Action.BUY;\n    } else if (result.poResult[i] < result.spoResult[i]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n\n// Export full name\nexport { poStrategy as projectionOscillatorStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiply, subtract } from '../../helper/numArray';\nimport { msum } from '../trend/movingSum';\n\n/**\n * Optional configuration of CMF parameters.\n */\nexport interface CMFConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of CMF.\n */\nexport const CMFDefaultConfig: Required<CMFConfig> = {\n  period: 20,\n};\n\n/**\n * The Chaikin Money Flow (CMF) measures the amount of money flow volume\n * over a given period.\n *\n * Money Flow Multiplier = ((Closing - Low) - (High - Closing)) / (High - Low)\n * Money Flow Volume = Money Flow Multiplier * Volume\n * Chaikin Money Flow = Sum(20, Money Flow Volume) / Sum(20, Volume)\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param volumes volume values.\n * @param config configuration.\n * @returns cmf values.\n */\nexport function cmf(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  volumes: number[],\n  config: CMFConfig = {}\n): number[] {\n  const { period } = { ...CMFDefaultConfig, ...config };\n  const moneyFlowMultipler = divide(\n    subtract(subtract(closings, lows), subtract(highs, closings)),\n    subtract(highs, lows)\n  );\n\n  const moneyFlowVolume = multiply(moneyFlowMultipler, volumes);\n\n  const result = divide(\n    msum(moneyFlowVolume, { period }),\n    msum(volumes, { period })\n  );\n\n  return result;\n}\n\n// Export full name\nexport { cmf as chaikinMoneyFlow };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  CMFConfig,\n  CMFDefaultConfig,\n  cmf,\n} from '../../indicator/volume/chaikinMoneyFlow';\nimport { Action } from '../action';\nimport { Asset } from '../asset';\n\n/**\n * The chaikin money flow strategy uses the cmf values that are generated\n * by the Chaikin Money Flow (CMF) indicator function to provide a BUY\n * action when cmf is less than zero, a SELL action when cmf is\n * greather than zero, a HOLD action otherwise.\n *\n * @param asset asset object.\n * @param config configuration.\n * @returns strategy actions.\n */\nexport function cmfStrategy(asset: Asset, config: CMFConfig = {}): Action[] {\n  const strategyConfig = { ...CMFDefaultConfig, ...config };\n  const result = cmf(\n    asset.highs,\n    asset.lows,\n    asset.closings,\n    asset.volumes,\n    strategyConfig\n  );\n\n  return result.map((value) => {\n    if (value < 0) {\n      return Action.BUY;\n    } else if (value > 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n\n// Export full name\nexport { cmfStrategy as chaikinMoneyFlowStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  add,\n  changes,\n  divide,\n  divideBy,\n  subtract,\n} from '../../helper/numArray';\nimport { sma } from '../trend/simpleMovingAverage';\n\n/**\n * Optional configuration of EMV parameters.\n */\nexport interface EMVConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of EMV.\n */\nexport const EMVDefaultConfig: Required<EMVConfig> = {\n  period: 14,\n};\n\n/**\n * The Ease of Movement (EMV) is a volume based oscillator measuring\n * the ease of price movement.\n *\n * Distance Moved = ((High + Low) / 2) - ((Priod High + Prior Low) /2)\n * Box Ratio = ((Volume / 100000000) / (High - Low))\n * EMV(1) = Distance Moved / Box Ratio\n * EMV(14) = SMA(14, EMV(1))\n *\n * @param highs high values.\n * @param lows low values.\n * @param volumes volume values.\n * @param config configuration.\n * @return ease of movement values.\n */\nexport function emv(\n  highs: number[],\n  lows: number[],\n  volumes: number[],\n  config: EMVConfig = {}\n): number[] {\n  const { period } = { ...EMVDefaultConfig, ...config };\n  const distanceMoved = changes(1, divideBy(2, add(highs, lows)));\n  const boxRatio = divide(divideBy(100000000, volumes), subtract(highs, lows));\n  const result = sma(divide(distanceMoved, boxRatio), { period });\n\n  return result;\n}\n\n// Export full name\nexport { emv as easeOfMovement };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  EMVConfig,\n  EMVDefaultConfig,\n  emv,\n} from '../../indicator/volume/easeOfMovement';\nimport { Action } from '../action';\nimport { Asset } from '../asset';\n\n/**\n * Ease of movement strategy.\n *\n * @param asset asset object.\n * @param config configuration.\n * @returns strategy actions.\n */\nexport function emvStrategy(asset: Asset, config: EMVConfig = {}): Action[] {\n  const strategyConfig = { ...EMVDefaultConfig, ...config };\n  const result = emv(asset.highs, asset.lows, asset.volumes, strategyConfig);\n\n  return result.map((value) => {\n    if (value > 0) {\n      return Action.BUY;\n    } else if (value < 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n\n// Export full name\nexport { emvStrategy as easeOfMovementStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { changes, multiply } from '../../helper/numArray';\nimport { ema } from '../trend/exponentialMovingAverage';\n\n/**\n * Optional configuration of FI parameters.\n */\nexport interface FIConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of FI.\n */\nexport const FIDefaultConfig: Required<FIConfig> = {\n  period: 13,\n};\n\n/**\n * The Force Index (FI) uses the closing price and the volume to assess\n * the power behind a move and identify turning points.\n *\n * Force Index = EMA(period, (Current - Previous) * Volume)\n *\n * @param closings closing values.\n * @param volumes volume values.\n * @param config configuration.\n * @return force index.\n */\nexport function fi(\n  closings: number[],\n  volumes: number[],\n  config: FIConfig = {}\n): number[] {\n  const { period } = { ...FIDefaultConfig, ...config };\n  const result = ema(multiply(changes(1, closings), volumes), { period });\n\n  return result;\n}\n\n// Export full name\nexport { fi as forceIndex };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  FIConfig,\n  FIDefaultConfig,\n  fi,\n} from '../../indicator/volume/forceIndex';\nimport { Action } from '../action';\nimport { Asset } from '../asset';\n\n/**\n * Force index strategy function.\n *\n * @param asset asset object.\n * @param config configuration.\n * @returns strategy actions.\n */\nexport function fiStrategy(asset: Asset, config: FIConfig = {}): Action[] {\n  const strategyConfig = { ...FIDefaultConfig, ...config };\n  const result = fi(asset.closings, asset.volumes, strategyConfig);\n\n  return result.map((value) => {\n    if (value > 0) {\n      return Action.BUY;\n    } else if (value < 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n\n// Export full name\nexport { fiStrategy as forceIndexStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  addBy,\n  changes,\n  divide,\n  extractSigns,\n  multiply,\n  multiplyBy,\n  pow,\n} from '../../helper/numArray';\nimport { msum } from '../trend/movingSum';\nimport { typprice } from '../trend/typicalPrice';\n\n/**\n * Optional configuration of MFI parameters.\n */\nexport interface MFIConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of MFI.\n */\nexport const MFIDefaultConfig: Required<MFIConfig> = {\n  period: 14,\n};\n\n/**\n * The Money Flow Index (MFI) analyzes both the closing price and the volume\n * to measure to identify overbought and oversold states. It is similar to\n * the Relative Strength Index (RSI), but it also uses the volume.\n *\n * Raw Money Flow = Typical Price * Volume\n * Money Ratio = Positive Money Flow / Negative Money Flow\n * Money Flow Index = 100 - (100 / (1 + Money Ratio))\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param volumes volume values.\n * @param config configuration.\n * @return money flow index values.\n */\nexport function mfi(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  volumes: number[],\n  config: MFIConfig = {}\n): number[] {\n  const { period } = { ...MFIDefaultConfig, ...config };\n  const rawMoneyFlow = multiply(typprice(highs, lows, closings), volumes);\n\n  const signs = extractSigns(changes(1, rawMoneyFlow));\n  const moneyFlow = multiply(signs, rawMoneyFlow);\n\n  const positiveMoneyFlow = moneyFlow.map((value) => (value >= 0 ? value : 0));\n  const negativeMoneyFlow = moneyFlow.map((value) => (value < 0 ? value : 0));\n\n  const moneyRatio = divide(\n    msum(positiveMoneyFlow, { period }),\n    msum(multiplyBy(-1, negativeMoneyFlow), { period })\n  );\n\n  const result = addBy(100, multiplyBy(-100, pow(addBy(1, moneyRatio), -1)));\n\n  return result;\n}\n\n// Export full name\nexport { mfi as moneyFlowIndex };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  MFIConfig,\n  MFIDefaultConfig,\n  mfi,\n} from '../../indicator/volume/moneyFlowIndex';\nimport { Action } from '../action';\nimport { Asset } from '../asset';\n\n/**\n * Money flow index strategy.\n *\n * @param asset asset object.\n * @param config configuration.\n * @return strategy actions.\n */\nexport function mfiStrategy(asset: Asset, config: MFIConfig = {}): Action[] {\n  const strategyConfig = { ...MFIDefaultConfig, ...config };\n  const result = mfi(\n    asset.highs,\n    asset.lows,\n    asset.closings,\n    asset.volumes,\n    strategyConfig\n  );\n\n  return result.map((value) => {\n    if (value >= 80) {\n      return Action.SELL;\n    } else {\n      return Action.BUY;\n    }\n  });\n}\n\n// Export full name\nexport { mfiStrategy as moneyFlowIndexStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { checkSameLength } from '../../helper/numArray';\n\n/**\n * Optional configuration of NVI parameters.\n */\nexport interface NVIConfig {\n  start?: number;\n  period?: number;\n}\n\n/**\n * The default configuration of NVI.\n */\nexport const NVIDefaultConfig: Required<NVIConfig> = {\n  start: 1000,\n  period: 255,\n};\n\n/**\n * The Negative Volume Index (NVI) is a cumulative indicator using\n * the change in volume to decide when the smart money is active.\n *\n * If Volume is greather than Previous Volume:\n *\n *   NVI = Previous NVI\n *\n * Otherwise:\n *\n *   NVI = Previous NVI + (((Closing - Previous Closing) / Previous Closing) * Previous NVI)\n *\n * @param closings closing values.\n * @param volumes volume values.,\n * @param config configuration.\n * @returns nvi values.\n */\nexport function nvi(\n  closings: number[],\n  volumes: number[],\n  config: NVIConfig = {}\n): number[] {\n  checkSameLength(closings, volumes);\n\n  const { start } = { ...NVIDefaultConfig, ...config };\n  const result = new Array<number>(closings.length);\n\n  for (let i = 0; i < result.length; i++) {\n    if (i === 0) {\n      result[i] = start;\n    } else if (volumes[i - 1] < volumes[i]) {\n      result[i] = result[i - 1];\n    } else {\n      result[i] =\n        result[i - 1] +\n        ((closings[i] - closings[i - 1]) / closings[i - 1]) * result[i - 1];\n    }\n  }\n\n  return result;\n}\n\n// Export full name\nexport { nvi as negativeVolumeIndex };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { ema } from '../../indicator/trend/exponentialMovingAverage';\nimport {\n  NVIConfig,\n  NVIDefaultConfig,\n  nvi,\n} from '../../indicator/volume/negativeVolumeIndex';\nimport { Action } from '../action';\nimport { Asset } from '../asset';\n\n/**\n * The negative volume index strategy uses the nvi values that are generated by\n * the Negative Volume Index (NVI) indicator function to provide a BUY action\n * when nvi is less than its 255-period EMA, and a SELL action when it is\n * greather than its 255-period EMA, otherwise a HOLD action.\n *\n * @param asset asset object.\n * @param config configuration.\n * @returns strategy actions.\n */\nexport function nviStrategy(asset: Asset, config: NVIConfig = {}): Action[] {\n  const strategyConfig = { ...NVIDefaultConfig, ...config };\n  const result = nvi(asset.closings, asset.volumes, strategyConfig);\n\n  const nviEma = ema(result, { period: strategyConfig.period });\n\n  const actions = new Array<Action>(result.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (result[i] < nviEma[i]) {\n      actions[i] = Action.BUY;\n    } else if (result[i] > nviEma[i]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n\n// Export full name\nexport { nviStrategy as negativeVolumeIndexStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiply } from '../../helper/numArray';\nimport { msum } from '../trend/movingSum';\n\n/**\n * Optional configuration of VWAP parameters.\n */\nexport interface VWAPConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of VWAP.\n */\nexport const VWAPDefaultConfig: Required<VWAPConfig> = {\n  period: 14,\n};\n\n/**\n * The Volume Weighted Average Price (VWAP) provides the average price\n * the asset has traded.\n *\n * VWAP = Sum(Closing * Volume) / Sum(Volume)\n *\n * @param closings closing values.\n * @param volumes volume values.\n * @param config configuration.\n * @returns vwap values.\n */\nexport function vwap(\n  closings: number[],\n  volumes: number[],\n  config: VWAPConfig = {}\n): number[] {\n  const { period } = { ...VWAPDefaultConfig, ...config };\n  const result = divide(\n    msum(multiply(closings, volumes), { period }),\n    msum(volumes, { period })\n  );\n\n  return result;\n}\n\n// Export full name\nexport { vwap as volumeWeightedAveragePrice };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { subtract } from '../../helper/numArray';\nimport {\n  VWAPConfig,\n  VWAPDefaultConfig,\n  vwap,\n} from '../../indicator/volume/volumeWeightedAveragePrice';\nimport { Action } from '../action';\nimport { Asset } from '../asset';\n\n/**\n * Volume weighted average price strategy uses the values that are generated\n * by the Volume Weighted Average Price (VWAP) indicator function to provide\n * a BUY action when the closing is below the VWAP, and a SELL action when\n * the closing is below the VWAP, a HOLD action otherwise.\n *\n * @param asset asset object.\n * @param config configuration.\n * @returns strategy actions.\n */\nexport function vwapStrategy(asset: Asset, config: VWAPConfig = {}): Action[] {\n  const strategyConfig = {\n    ...VWAPDefaultConfig,\n    ...config,\n  };\n  const result = vwap(asset.closings, asset.volumes, strategyConfig);\n\n  const diff = subtract(result, asset.closings);\n\n  return diff.map((value) => {\n    if (value > 0) {\n      return Action.BUY;\n    } else if (value < 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n\n// Export full name\nexport { vwapStrategy as volumeWeightedAveragePriceStrategy };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { StrategyFunction } from '../strategy/strategyFunction';\n// buy and hold\nimport { buyAndHoldStrategy } from '../strategy/buyAndHoldStrategy';\n// momentum\nimport { awesomeOscillatorStrategy } from '../strategy/momentum/awesomeOscillatorStrategy';\nimport { ichimokuCloudStrategy } from '../strategy/momentum/ichimokuCloudStrategy';\nimport { rsi2Strategy } from '../strategy/momentum/rsi2Strategy';\nimport { stochasticOscillatorStrategy } from '../strategy/momentum/stochasticOscillatorStrategy';\nimport { williamsRStrategy } from '../strategy/momentum/williamsRStrategy';\n// trend\nimport { absolutePriceOscillatorStrategy } from '../strategy/trend/absolutePriceOscillatorStrategy';\nimport { aroonStrategy } from '../strategy/trend/aroonStrategy';\nimport { balanceOfPowerStrategy } from '../strategy/trend/balanceOfPowerStrategy';\nimport { chandeForecastOscillatorStrategy } from '../strategy/trend/chandeForecastOscillatorStrategy';\nimport { kdjStrategy } from '../strategy/trend/kdjStrategy';\nimport { macdStrategy } from '../strategy/trend/macdStrategy';\nimport { psarStrategy } from '../strategy/trend/parabolicSarStrategy';\nimport { typicalPriceStrategy } from '../strategy/trend/typicalPriceStrategy';\nimport { vortexStrategy } from '../strategy/trend/vortexStrategy';\n// volatility\nimport { accelerationBandsStrategy } from '../strategy/volatility/accelerationBandsStrategy';\nimport { bollingerBandsStrategy } from '../strategy/volatility/bollingerBandsStrategy';\nimport { projectionOscillatorStrategy } from '../strategy/volatility/projectionOscillatorStrategy';\n// volume\nimport { chaikinMoneyFlowStrategy } from '../strategy/volume/chaikinMoneyFlowStrategy';\nimport { easeOfMovementStrategy } from '../strategy/volume/easeOfMovementStrategy';\nimport { forceIndexStrategy } from '../strategy/volume/forceIndexStrategy';\nimport { moneyFlowIndexStrategy } from '../strategy/volume/moneyFlowIndexStrategy';\nimport { negativeVolumeIndexStrategy } from '../strategy/volume/negativeVolumeIndexStrategy';\nimport { volumeWeightedAveragePriceStrategy } from '../strategy/volume/volumeWeightedAveragePriceStrategy';\n\n/**\n * Strategy info.\n */\nexport interface StrategyInfo {\n  name: string;\n  strategy: StrategyFunction;\n}\n\n/**\n * Strategy infos.\n */\nexport const STRATEGY_INFOS: StrategyInfo[] = [\n  // buy and hold\n  {\n    name: 'Buy Hold',\n    strategy: buyAndHoldStrategy,\n  },\n  // momentum\n  {\n    name: 'Awesome Oscillator',\n    strategy: awesomeOscillatorStrategy,\n  },\n  {\n    name: 'RSI 2',\n    strategy: rsi2Strategy,\n  },\n  {\n    name: 'Ichimoku Cloud',\n    strategy: ichimokuCloudStrategy,\n  },\n  {\n    name: 'Stochastic Oscillator',\n    strategy: stochasticOscillatorStrategy,\n  },\n  {\n    name: 'Williams R',\n    strategy: williamsRStrategy,\n  },\n  // trend\n  {\n    name: 'Absolute Price Oscillator (APO)',\n    strategy: absolutePriceOscillatorStrategy,\n  },\n  {\n    name: 'Aroon Strategy',\n    strategy: aroonStrategy,\n  },\n  {\n    name: 'Balance of Power (BOM)',\n    strategy: balanceOfPowerStrategy,\n  },\n  {\n    name: 'Chande Forecast Oscillator (CFO)',\n    strategy: chandeForecastOscillatorStrategy,\n  },\n  {\n    name: 'KDJ Strategy',\n    strategy: kdjStrategy,\n  },\n  {\n    name: 'MACD Strategy',\n    strategy: macdStrategy,\n  },\n  {\n    name: 'Parabolic SAR',\n    strategy: psarStrategy,\n  },\n  {\n    name: 'Typical Price',\n    strategy: typicalPriceStrategy,\n  },\n  {\n    name: 'Vortex Strategy',\n    strategy: vortexStrategy,\n  },\n  // volatility\n  {\n    name: 'Acceleration Bands',\n    strategy: accelerationBandsStrategy,\n  },\n  {\n    name: 'Bollinger Bands',\n    strategy: bollingerBandsStrategy,\n  },\n  {\n    name: 'Projection Oscillator',\n    strategy: projectionOscillatorStrategy,\n  },\n  // volume\n  {\n    name: 'Chaikin Money Flow (CMF)',\n    strategy: chaikinMoneyFlowStrategy,\n  },\n  {\n    name: 'Ease of Movement (EMV)',\n    strategy: easeOfMovementStrategy,\n  },\n  {\n    name: 'Force Index',\n    strategy: forceIndexStrategy,\n  },\n  {\n    name: 'Money Flow Index',\n    strategy: moneyFlowIndexStrategy,\n  },\n  {\n    name: 'Negative Volume Index (NVI)',\n    strategy: negativeVolumeIndexStrategy,\n  },\n  {\n    name: 'Volume Weighted Average Price',\n    strategy: volumeWeightedAveragePriceStrategy,\n  },\n];\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { CompanyResult } from './companyResult';\nimport { StrategyInfo } from './strategyInfo';\nimport { StrategyResult } from './strategyResult';\n\n/**\n * Strategy stats.\n */\nexport interface StrategyStats {\n  strategyInfo: StrategyInfo;\n  score: number;\n  minGain: number;\n  maxGain: number;\n  averageGain: number;\n}\n\n/**\n * New strategy stats from strategy result.\n *\n * @param result strategy result.\n * @return strategy stats.\n */\nfunction newStrategyStats(result: StrategyResult): StrategyStats {\n  return {\n    strategyInfo: result.info,\n    score: 1,\n    minGain: result.gain,\n    maxGain: result.gain,\n    averageGain: result.gain,\n  };\n}\n\n/**\n * Updates strategy stats using strategy result.\n *\n * @param stats strategy stats.\n * @param result strategy result.\n */\nfunction updateStrategyStats(stats: StrategyStats, result: StrategyResult) {\n  stats.score++;\n  stats.minGain = Math.min(stats.minGain, result.gain);\n  stats.maxGain = Math.max(stats.maxGain, result.gain);\n  stats.averageGain = (stats.averageGain + result.gain) / 2;\n}\n\n/**\n * Computes the strategy stats.\n *\n * @param companyResults company results.\n * @return stats array.\n */\nexport function computeStrategyStats(\n  companyResults: CompanyResult[]\n): StrategyStats[] {\n  const statsMap = new Map<string, StrategyStats>();\n\n  for (const companyResult of companyResults) {\n    const strategyResult = companyResult.strategyResults[0];\n\n    const strategyStats = statsMap.get(strategyResult.info.name);\n    if (strategyStats !== undefined) {\n      updateStrategyStats(strategyStats, strategyResult);\n    } else {\n      statsMap.set(strategyResult.info.name, newStrategyStats(strategyResult));\n    }\n  }\n\n  const statsArray = Array.from(statsMap.values());\n  statsArray.sort((a, b) => b.score - a.score);\n\n  return statsArray;\n}\n\n/**\n * Strategy stats sort by.\n */\nexport enum StrategyStatsSortBy {\n  STRATEGY,\n  SCORE,\n  MIN,\n  MAX,\n  AVERAGE,\n}\n\n/**\n * Sorts the strategy stats.\n *\n * @param strategyStats strategy stats.\n * @param sortBy sort by.\n * @param ascending ascending toggle.\n * @return sorted stats.\n */\nexport function sortStrategyStats(\n  strategyStats: StrategyStats[],\n  sortBy: StrategyStatsSortBy,\n  ascending: boolean\n): StrategyStats[] {\n  let sorted: StrategyStats[] = [];\n\n  switch (sortBy) {\n    case StrategyStatsSortBy.STRATEGY:\n      sorted = strategyStats.sort((a, b) =>\n        a.strategyInfo.name.localeCompare(b.strategyInfo.name)\n      );\n      break;\n\n    case StrategyStatsSortBy.SCORE:\n      sorted = strategyStats.sort((a, b) => a.score - b.score);\n      break;\n\n    case StrategyStatsSortBy.MIN:\n      sorted = strategyStats.sort((a, b) => a.minGain - b.minGain);\n      break;\n\n    case StrategyStatsSortBy.MAX:\n      sorted = strategyStats.sort((a, b) => a.maxGain - b.maxGain);\n      break;\n\n    case StrategyStatsSortBy.AVERAGE:\n      sorted = strategyStats.sort((a, b) => a.averageGain - b.averageGain);\n      break;\n  }\n\n  if (!ascending) {\n    sorted = sorted.reverse();\n  }\n\n  return sorted;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Numeric range.\n */\nexport class NumRange {\n  private min: number;\n  private max: number;\n\n  /**\n   * Constructor.\n   * @param min min value.\n   * @param max max value.\n   */\n  constructor(min: number, max: number) {\n    this.min = min;\n    this.max = max;\n  }\n\n  /**\n   * Gets the min value.\n   * @return min value.\n   */\n  getMin(): number {\n    return this.min;\n  }\n\n  /**\n   * Gets the max value.\n   * @return max value.\n   */\n  getMax(): number {\n    return this.max;\n  }\n\n  /**\n   * Calculates the span of the range.\n   * @return span value.\n   */\n  span(): number {\n    return this.max - this.min;\n  }\n\n  /**\n   * Merge function merges the given ranges.\n   * @param ranges range objects.\n   * @return merged ranges.\n   */\n  static merge(ranges: NumRange[]): NumRange {\n    return ranges.reduce(\n      (p, c) => new NumRange(Math.min(p.min, c.min), Math.max(p.max, c.max))\n    );\n  }\n\n  /**\n   * From function returns the range of the values.\n   * @param values values array.\n   * @return range of the values.\n   */\n  static from(values: number[]): NumRange {\n    return new NumRange(Math.min(...values), Math.max(...values));\n  }\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { NumRange } from './numRange';\n\n/**\n * Numeric scaler.\n */\nexport class NumScaler {\n  private fromDelta: number;\n  private toDelta: number;\n  private multiplier: number;\n\n  /**\n   * Constructor.\n   * @param from from range.\n   * @param to to range.\n   */\n  constructor(from: NumRange, to: NumRange) {\n    this.fromDelta = from.getMin();\n    this.toDelta = to.getMin();\n    this.multiplier = to.span() / from.span();\n  }\n\n  /**\n   * Scales the given number.\n   * @param n current value.\n   * @return scaled value.\n   */\n  scale(n: number): number {\n    return (n - this.fromDelta) * this.multiplier + this.toDelta;\n  }\n\n  /**\n   * Descales the given number.\n   * @param n scaled value.\n   * @return descaled value.\n   */\n  descale(n: number): number {\n    return (n - this.toDelta) / this.multiplier + this.fromDelta;\n  }\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { roundDigits } from '../helper/numArray';\nimport { NumRange } from './numRange';\nimport { NumScaler } from './numScaler';\n\nconst DEFAULT_STYLE = 'black';\nconst DEFAULT_WIDTH = 1;\nconst FOCUS_STYLE = 'red';\nconst FOCUS_WIDTH = 1;\nconst LEGEND_HEIGHT = 30;\nconst LEGEND_GAP = 4;\nconst LEGEND_FONT = '14px Arial';\nconst NO_FOCUS = -1;\nconst DEFAULT_RANGE = new NumRange(0, 1);\n\n/**\n * Data set.\n */\nexport interface DataSet {\n  legend: string;\n  values: number[];\n  style?: string | string[];\n  width?: number;\n}\n\n/**\n * Chart object.\n */\nexport class Chart {\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private dataSets: Map<string, DataSet>;\n  private dateSetsChanged: boolean;\n  private xScaler: NumScaler;\n  private yScaler: NumScaler;\n  private xFocus: number;\n\n  /**\n   * Constructor.\n   * @param id canvas id.\n   */\n  constructor(id: string) {\n    const canvas = document.getElementById(id);\n    if (canvas === null) {\n      throw new Error('Canvas element not found');\n    } else if (!(canvas instanceof HTMLCanvasElement)) {\n      throw new Error('Not a canvas element');\n    }\n\n    this.canvas = canvas;\n\n    const context = this.canvas.getContext('2d');\n    if (context === null) {\n      throw new Error('Canvas context is null');\n    }\n\n    this.context = context;\n    this.dataSets = new Map<string, DataSet>();\n    this.dateSetsChanged = false;\n    this.xScaler = new NumScaler(DEFAULT_RANGE, DEFAULT_RANGE);\n    this.yScaler = new NumScaler(DEFAULT_RANGE, DEFAULT_RANGE);\n    this.xFocus = NO_FOCUS;\n\n    this.canvas.addEventListener('mousemove', (ev) => this.onMouseMove(ev));\n    this.canvas.addEventListener('mouseout', () => this.onMouseOut());\n  }\n\n  /**\n   * Add the data set.\n   * @param dataSet data set.\n   */\n  add(dataSet: DataSet): void {\n    this.dataSets.set(dataSet.legend, dataSet);\n    this.dateSetsChanged = true;\n  }\n\n  /**\n   * Removes the data set by the given legend.\n   * @param legend data set legend value.\n   * @return data set is removed.\n   */\n  remove(legend: string): boolean {\n    const found = this.dataSets.delete(legend);\n    if (found) {\n      this.dateSetsChanged = true;\n    }\n\n    return found;\n  }\n\n  /**\n   * Draw canvas.\n   */\n  draw(): void {\n    if (this.dateSetsChanged) {\n      this.updateScalers();\n      this.dateSetsChanged = false;\n    }\n\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.drawDataSets();\n    this.drawFocus();\n  }\n\n  /**\n   * Draws the data sets.\n   */\n  private drawDataSets() {\n    const height = this.chartHeight();\n\n    for (const dataSet of this.dataSets.values()) {\n      this.context.lineWidth = dataSet.width ?? DEFAULT_WIDTH;\n\n      let lastX = 0;\n      let lastY = 0;\n\n      for (let i = 0; i < dataSet.values.length; i++) {\n        const x = this.xScaler.scale(i);\n        const y = height - this.yScaler.scale(dataSet.values[i]);\n\n        if (i > 0) {\n          this.context.strokeStyle = this.styleAtIndex(dataSet, i);\n          this.context.beginPath();\n          this.context.moveTo(lastX, lastY);\n          this.context.lineTo(x, y);\n          this.context.stroke();\n        }\n\n        lastX = x;\n        lastY = y;\n      }\n    }\n  }\n\n  /**\n   * Style at given index.\n   * @param dataSet data set.\n   * @param index at index.\n   * @return at style.\n   */\n  private styleAtIndex(dataSet: DataSet, index: number): string {\n    if (dataSet.style === undefined) {\n      return DEFAULT_STYLE;\n    } else if (Array.isArray(dataSet.style)) {\n      return dataSet.style[index];\n    } else {\n      return dataSet.style;\n    }\n  }\n\n  /**\n   * Draws focus line and focused values.\n   */\n  private drawFocus() {\n    if (this.xFocus !== NO_FOCUS) {\n      this.drawFocusLine();\n      this.drawFocusedValues();\n    }\n  }\n\n  /**\n   * Draws the focus line.\n   */\n  private drawFocusLine() {\n    this.context.strokeStyle = FOCUS_STYLE;\n    this.context.lineWidth = FOCUS_WIDTH;\n    this.context.beginPath();\n    this.context.moveTo(this.xFocus, 0);\n    this.context.lineTo(this.xFocus, this.chartHeight());\n    this.context.stroke();\n  }\n\n  /**\n   * Draws the focused values.\n   */\n  private drawFocusedValues() {\n    const index = Math.round(this.xScaler.descale(this.xFocus));\n    let xOffset = LEGEND_GAP;\n\n    this.context.font = LEGEND_FONT;\n    this.context.textBaseline = 'bottom';\n\n    for (const dataSet of this.dataSets.values()) {\n      if (index >= 0 && index < dataSet.values.length) {\n        const text =\n          dataSet.legend +\n          ' ' +\n          roundDigits(2, dataSet.values[index]).toString();\n\n        this.context.fillStyle = this.styleAtIndex(dataSet, index);\n        this.context.fillText(text, xOffset, this.canvas.height - LEGEND_GAP);\n\n        xOffset += this.context.measureText(text).width + LEGEND_GAP;\n      }\n    }\n  }\n\n  /**\n   * Calculates the chart height.\n   * @return chart height.\n   */\n  private chartHeight(): number {\n    return this.canvas.height - LEGEND_HEIGHT;\n  }\n\n  /**\n   * Updates scalers.\n   */\n  private updateScalers() {\n    if (this.dataSets.size === 0) {\n      return;\n    }\n\n    this.xScaler = new NumScaler(\n      new NumRange(\n        0,\n        Math.max(...Array.from(this.dataSets.values(), (d) => d.values.length))\n      ),\n      new NumRange(0, this.canvas.width)\n    );\n\n    this.yScaler = new NumScaler(\n      NumRange.merge(\n        Array.from(this.dataSets.values(), (d) => NumRange.from(d.values))\n      ),\n      new NumRange(0, this.chartHeight())\n    );\n  }\n\n  /**\n   * On mouse move event.\n   * @param ev mouse event.\n   */\n  private onMouseMove(ev: MouseEvent) {\n    const clientRect = this.canvas.getBoundingClientRect();\n    this.xFocus = ev.clientX - clientRect.left;\n    this.draw();\n  }\n\n  /**\n   * On mouse out event.\n   */\n  private onMouseOut() {\n    this.xFocus = NO_FOCUS;\n    this.draw();\n  }\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * To ISO date string.\n * @param date date object.\n * @return ISO date.\n */\nexport function toISODateString(date: Date): string {\n  return date.toISOString().substring(0, 10);\n}\n\n/**\n * DaysAgo function returns a date for the given days ago.\n * @param days days ago.\n * @return date object.\n */\nexport function daysAgo(days: number): Date {\n  const ago = new Date();\n  ago.setDate(ago.getDate() - days);\n  return ago;\n}\n\n/**\n * DaysLaterFrom function returns a date later from given\n * date in given days.\n * @param date date object.\n * @param days days later.\n * @return date object.\n */\nexport function daysLaterFrom(date: Date, days: number): Date {\n  const later = new Date(date);\n  later.setDate(later.getDate() + days);\n  return later;\n}\n\n/**\n * ToMonthAndDay function returns string representation of\n * the date as month and day.\n * @param date date boject.\n * @return month and day string.\n */\nexport function toMonthAndDay(date: Date): string {\n  return (date.getMonth() + 1).toString() + '/' + date.getDate().toString();\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiply, subtract } from '../../helper/numArray';\n\n/**\n * Accumulation/Distribution Indicator (A/D). Cumulative indicator\n * that uses volume and price to assess whether a stock is\n * being accumulated or distributed.\n *\n * MFM = ((Closing - Low) - (High - Closing)) / (High - Low)\n * MFV = MFM * Period Volume\n * AD = Previous AD + CMFV\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param volume volume values.\n * @return ad values.\n */\nexport function ad(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  volume: number[]\n): number[] {\n  const mfm = divide(\n    subtract(subtract(closings, lows), subtract(highs, closings)),\n    subtract(highs, lows)\n  );\n\n  const mfv = multiply(mfm, volume);\n\n  const result = new Array<number>(mfv.length);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = mfv[i];\n    if (i > 0) {\n      result[i] += result[i - 1];\n    }\n  }\n\n  return result;\n}\n\n// Export full name\nexport { ad as accumulationDistribution };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { subtract } from '../../helper/numArray';\nimport { ema } from '../trend/exponentialMovingAverage';\nimport { ad } from '../volume/accumulationDistribution';\n\n/**\n * Chaikin oscillator result object.\n */\nexport interface CMOResult {\n  adResult: number[];\n  cmoResult: number[];\n}\n\n/**\n * Optional configuration of Chaikin oscillator parameters.\n */\nexport interface CMOConfig {\n  fast?: number;\n  slow?: number;\n}\n\n/**\n * The default configuration of Chaikin oscillator.\n */\nexport const CMODefaultConfig: Required<CMOConfig> = {\n  fast: 3,\n  slow: 10,\n};\n\n/**\n * The ChaikinOscillator function measures the momentum of the\n * Accumulation/Distribution (A/D) using the Moving Average\n * Convergence Divergence (MACD) formula. It takes the\n * difference between fast and slow periods EMA of the A/D.\n * Cross above the A/D line indicates bullish.\n *\n * CO = Ema(fastPeriod, AD) - Ema(slowPeriod, AD)\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param volumes volume values.\n * @param config configuration.\n * @return chaikin oscillator.\n */\nexport function cmo(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  volumes: number[],\n  config: CMOConfig = {}\n): CMOResult {\n  const { fast, slow } = { ...CMODefaultConfig, ...config };\n  const adResult = ad(highs, lows, closings, volumes);\n  const cmoResult = subtract(\n    ema(adResult, { period: fast }),\n    ema(adResult, { period: slow })\n  );\n\n  return { adResult, cmoResult };\n}\n\n// Export full name\nexport { cmo as chaikinOscillator };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiplyBy, subtract } from '../../helper/numArray';\nimport { ema } from '../trend/exponentialMovingAverage';\n\n/**\n * Percentage price oscillator result.\n */\nexport interface PPOResult {\n  ppoResult: number[];\n  signal: number[];\n  histogram: number[];\n}\n\n/**\n * Optional configuration of PPO parameters.\n */\nexport interface PPOConfig {\n  fast?: number;\n  slow?: number;\n  signal?: number;\n}\n\n/**\n * The default configuration of PPO.\n */\nexport const PPODefaultConfig: Required<PPOConfig> = {\n  fast: 12,\n  slow: 26,\n  signal: 9,\n};\n\n/**\n * Percentage Price Oscillator (PPO). It is a momentum oscillator for the price.\n * It is used to indicate the ups and downs based on the price. A breakout is\n * confirmed when PPO is positive.\n *\n * PVO = ((EMA(fastPeriod, prices) - EMA(slowPeriod, prices)) / EMA(longPeriod, prices)) * 100\n * Signal = EMA(9, PVO)\n * Histogram = PVO - Signal\n *\n * @param prices price values.\n * @param config configuration.\n * @returns oscillator result.\n */\nexport function ppo(prices: number[], config: PPOConfig = {}): PPOResult {\n  const {\n    fast: fastPeriod,\n    slow: slowPeriod,\n    signal: signalPeriod,\n  } = { ...PPODefaultConfig, ...config };\n  const fastEma = ema(prices, { period: fastPeriod });\n  const slowEma = ema(prices, { period: slowPeriod });\n\n  const ppoResult = multiplyBy(\n    100,\n    divide(subtract(fastEma, slowEma), slowEma)\n  );\n  const signal = ema(ppoResult, { period: signalPeriod });\n  const histogram = subtract(ppoResult, signal);\n\n  return {\n    ppoResult,\n    signal,\n    histogram,\n  };\n}\n\n// Export full name\nexport { ppo as percentagePriceOscillator };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiplyBy, subtract } from '../../helper/numArray';\nimport { ema } from '../trend/exponentialMovingAverage';\n\n/**\n * Percentage volume oscillator result.\n */\nexport interface PVOResult {\n  pvoResult: number[];\n  signal: number[];\n  histogram: number[];\n}\n\n/**\n * Optional configuration of PVO parameters.\n */\nexport interface PVOConfig {\n  fast?: number;\n  slow?: number;\n  signal?: number;\n}\n\n/**\n * The default configuration of PVO.\n */\nexport const PVODefaultConfig: Required<PVOConfig> = {\n  fast: 12,\n  slow: 26,\n  signal: 9,\n};\n\n/**\n * Percentage Volume Oscillator (PVO). It is a momentum oscillator for the volume.\n * It is used to indicate the ups and downs based on the volume. A breakout is\n * confirmed when PVO is positive.\n *\n * PVO = ((EMA(fastPeriod, volumes) - EMA(slowPeriod, volumes)) / EMA(longPeriod, volumes)) * 100\n * Signal = EMA(9, PVO)\n * Histogram = PVO - Signal\n *\n * @param volumes volume values.\n * @param config configuration.\n * @returns oscillator result.\n */\nexport function pvo(volumes: number[], config: PVOConfig = {}): PVOResult {\n  const {\n    fast: fastPeriod,\n    slow: slowPeriod,\n    signal: signalPeriod,\n  } = { ...PVODefaultConfig, ...config };\n  const fastEma = ema(volumes, { period: fastPeriod });\n  const slowEma = ema(volumes, { period: slowPeriod });\n\n  const pvoResult = multiplyBy(\n    100,\n    divide(subtract(fastEma, slowEma), slowEma)\n  );\n  const signal = ema(pvoResult, { period: signalPeriod });\n  const histogram = subtract(pvoResult, signal);\n\n  return {\n    pvoResult,\n    signal,\n    histogram,\n  };\n}\n\n// Export full name\nexport { pvo as percentageVolumeOscillator };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Optional configuration of ROC parameters.\n */\nexport interface ROCConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of ROC.\n */\nexport const ROCDefaultConfig: Required<ROCConfig> = {\n  period: 3,\n};\n\n/**\n * Price Rate of Change (ROC).\n *\n * ROC[i] = 0 when i < period\n * ROC[i] = (close[i] / close[i-period] - 1) * 100 when i >= period\n *\n * @param values values array.\n * @return ROC values.\n */\nexport function roc(values: number[], config: ROCConfig = {}): number[] {\n  const { period } = { ...ROCDefaultConfig, ...config };\n  const result = new Array<number>(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    if (i < period) {\n      // Setting indicator values to 0 for days before the 1st period.\n      result[i] = 0;\n    } else {\n      result[i] = (values[i] / values[i - period] - 1) * 100;\n    }\n  }\n\n  return result;\n}\n\n// Export full name\nexport { roc as priceRateOfChange };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { abs, divide, multiplyBy, subtract } from '../../helper/numArray';\nimport { sma } from './simpleMovingAverage';\nimport { typprice } from './typicalPrice';\n\n/**\n * Optional configuration of CCI parameters.\n */\nexport interface CCIConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of CCI.\n */\nexport const CCIDefaultConfig: Required<CCIConfig> = {\n  period: 20,\n};\n\n/**\n * The Community Channel Index (CCI) is a momentum-based oscillator\n * used to help determine when an investment vehicle is reaching a\n * condition of being overbought or oversold.\n *\n * Moving Average = Sma(Period, Typical Price)\n * Mean Deviation = Sma(Period, Abs(Typical Price - Moving Average))\n * CMI = (Typical Price - Moving Average) / (0.015 * Mean Deviation)\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param config configuration.\n * @returns cmi values.\n */\nexport function cci(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  config: CCIConfig = {}\n): number[] {\n  const { period } = { ...CCIDefaultConfig, ...config };\n  const tp = typprice(highs, lows, closings);\n  const ma = sma(tp, { period });\n  const md = sma(abs(subtract(tp, ma)), { period });\n  const result = divide(subtract(tp, ma), multiplyBy(0.015, md));\n  return result;\n}\n\n// Export full name\nexport { cci as communityChannelIndex };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { multiplyBy, subtract } from '../../helper/numArray';\nimport { ema } from './exponentialMovingAverage';\n\n/**\n * Optional configuration of DEMA parameters.\n */\nexport interface DEMAConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of DEMA.\n */\nexport const DEMADefaultConfig: Required<DEMAConfig> = {\n  period: 12,\n};\n\n/**\n * Dema calculates the Double Exponential Moving Average (DEMA).\n *\n * DEMA = (2 * EMA(values)) - EMA(EMA(values))\n *\n * @param values values array.\n * @param config configuration\n * @return dema values.\n */\nexport function dema(values: number[], config: DEMAConfig = {}): number[] {\n  const { period } = { ...DEMADefaultConfig, ...config };\n  const ema1 = ema(values, { period });\n  const ema2 = ema(ema1, { period });\n\n  const result = subtract(multiplyBy(2, ema1), ema2);\n\n  return result;\n}\n\n// Export full name\nexport { dema as doubleExponentialMovingAverage };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, subtract } from '../../helper/numArray';\nimport { ema } from './exponentialMovingAverage';\nimport { msum } from './movingSum';\n\n/**\n * Optional configuration of MI parameters.\n */\nexport interface MIConfig {\n  emaPeriod?: number;\n  miPeriod?: number;\n}\n\n/**\n * The default configuration of MI.\n */\nexport const MIDefaultConfig: Required<MIConfig> = {\n  emaPeriod: 9,\n  miPeriod: 25,\n};\n\n/**\n * The Mass Index (MI) uses the high-low range to identify trend reversals\n * based on range expansions.\n *\n * Singe EMA = EMA(9, Highs - Lows)\n * Double EMA = EMA(9, Single EMA)\n * Ratio = Single EMA / Double EMA\n * MI = Sum(25, Ratio)\n *\n * @param highs high values.\n * @param lows low values.\n * @param config configuration.\n * @returns mi values.\n */\nexport function mi(\n  highs: number[],\n  lows: number[],\n  config: MIConfig = {}\n): number[] {\n  const { emaPeriod, miPeriod } = { ...MIDefaultConfig, ...config };\n  const ema1 = ema(subtract(highs, lows), { period: emaPeriod });\n  const ema2 = ema(ema1, { period: emaPeriod });\n  const ratio = divide(ema1, ema2);\n  const result = msum(ratio, { period: miPeriod });\n\n  return result;\n}\n\n// Export full name\nexport { mi as massIndex };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { subtract } from '../../helper/numArray';\nimport { sma } from './simpleMovingAverage';\n\n/**\n * Optional configuration of Qstick parameters.\n */\nexport interface QstickConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of Qstick.\n */\nexport const QstickDefaultConfig: Required<QstickConfig> = {\n  period: 14,\n};\n\n/**\n * The Qstick function calculates the ratio of recent up and down bars.\n *\n * QS = Sma(Closing - Opening)\n *\n * @param openings openinig values.\n * @param closings closing values.\n * @param config configuration.\n * @return qstick values.\n */\nexport function qstick(\n  openings: number[],\n  closings: number[],\n  config: QstickConfig = {}\n): number[] {\n  const { period } = { ...QstickDefaultConfig, ...config };\n  const result = sma(subtract(closings, openings), { period });\n\n  return result;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { sma } from './simpleMovingAverage';\n\n/**\n * Optional configuration of TRIMA parameters.\n */\nexport interface TRIMAConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of TRIMA.\n */\nexport const TRIMADefaultConfig: Required<TRIMAConfig> = {\n  period: 4,\n};\n\n/**\n * Trima function calculates the Triangular Moving Average (TRIMA).\n *\n * If period is even:\n *   TRIMA = SMA(period / 2, SMA((period / 2) + 1, values))\n * If period is odd:\n *   TRIMA = SMA((period + 1) / 2, SMA((period + 1) / 2, values))\n *\n * @param values values array.\n * @param config configuration.\n * @return trima values.\n */\nexport function trima(values: number[], config: TRIMAConfig = {}): number[] {\n  const { period } = { ...TRIMADefaultConfig, ...config };\n  let n1 = 0;\n  let n2 = 0;\n\n  if (period % 2 === 0) {\n    n1 = period / 2;\n    n2 = n1 + 1;\n  } else {\n    n1 = (period + 1) / 2;\n    n2 = n1;\n  }\n\n  const result = sma(sma(values, { period: n2 }), { period: n1 });\n\n  return result;\n}\n\n// Export full name\nexport { trima as triangularMovingAverage };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, shiftRightAndFillBy, subtract } from '../../helper/numArray';\nimport { ema } from './exponentialMovingAverage';\n\n/**\n * Optional configuration of TRIX parameters.\n */\nexport interface TRIXConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of TRIX.\n */\nexport const TRIXDefaultConfig: Required<TRIXConfig> = {\n  period: 4,\n};\n\n/**\n * Triple Exponential Average (TRIX) indicator is an oscillator used to\n * identify oversold and overbought markets, and it can also be used\n * as a momentum indicator. Like many oscillators, TRIX oscillates\n * around a zero line.\n *\n * EMA1 = EMA(period, values)\n * EMA2 = EMA(period, EMA1)\n * EMA3 = EMA(period, EMA2)\n * TRIX = (EMA3 - Previous EMA3) / Previous EMA3\n *\n * @param values values array.\n * @param config configuration.\n * @returns trix values.\n */\nexport function trix(values: number[], config: TRIXConfig = {}): number[] {\n  const { period } = { ...TRIXDefaultConfig, ...config };\n  const ema1 = ema(values, { period });\n  const ema2 = ema(ema1, { period });\n  const ema3 = ema(ema2, { period });\n  const previous = shiftRightAndFillBy(1, ema3[0], ema3);\n  const result = divide(subtract(ema3, previous), previous);\n\n  return result;\n}\n\n// Export full name\nexport { trix as tripleExponentialAverage };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, multiplyBy, subtract } from '../../helper/numArray';\nimport { ema } from './exponentialMovingAverage';\n\n/**\n * Optional configuration of TEMA parameters.\n */\nexport interface TEMAConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of TEMA.\n */\nexport const TEMADefaultConfig: Required<TEMAConfig> = {\n  period: 2,\n};\n\n/**\n * Tema calculates the Triple Exponential Moving Average (TEMA).\n *\n * TEMA = (3 * EMA1) - (3 * EMA2) + EMA3\n * EMA1 = EMA(values)\n * EMA2 = EMA(EMA1)\n * EMA3 = EMA(EMA2)\n *\n * @param period window period.\n * @param values values array.\n * @return tema values.\n */\nexport function tema(values: number[], config: TEMAConfig = {}): number[] {\n  const { period } = { ...TEMADefaultConfig, ...config };\n  const ema1 = ema(values, { period });\n  const ema2 = ema(ema1, { period });\n  const ema3 = ema(ema2, { period });\n\n  const result = add(subtract(multiplyBy(3, ema1), multiplyBy(3, ema2)), ema3);\n\n  return result;\n}\n\n// Export full name\nexport { tema as tripleExponentialMovingAverage };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiply } from '../../helper/numArray';\nimport { msum } from './movingSum';\n\n/**\n * Optional configuration of VWMA parameters.\n */\nexport interface VWMAConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of VWMA.\n */\nexport const VWMADefaultConfig: Required<VWMAConfig> = {\n  period: 20,\n};\n\n/**\n * The vwma function calculates the Volume Weighted Moving Average (VWMA)\n * averaging the price data with an emphasis on volume, meaning areas\n * with higher volume will have a greater weight.\n *\n * VWMA = Sum(Price * Volume) / Sum(Volume) for a given Period.\n *\n * @param closings asset closings.\n * @param volumes asset volumes.\n * @param config configuration.\n * @returns vwma values.\n */\nexport function vwma(\n  closings: number[],\n  volumes: number[],\n  config: VWMAConfig = {}\n): number[] {\n  const { period } = { ...VWMADefaultConfig, ...config };\n  const result = divide(\n    msum(multiply(closings, volumes), { period }),\n    msum(volumes, { period })\n  );\n\n  return result;\n}\n\n// Export full name\nexport { vwma as volumeWeightedMovingAverage };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  abs,\n  checkSameLength,\n  max,\n  shiftRightAndFillBy,\n  subtract,\n} from '../../helper/numArray';\n\n/**\n * True Range (TR).\n *\n * TR = Max((High - Low), Abs(High - Closing[-1]), Abs(Low - Closing[-1]))\n *\n * @param period window period.\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return tr values.\n */\nexport function tr(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): number[] {\n  checkSameLength(highs, lows, closings);\n\n  const previous = shiftRightAndFillBy(1, closings[0], closings);\n\n  const result = max(\n    subtract(highs, lows),\n    abs(subtract(highs, previous)),\n    abs(subtract(lows, previous))\n  );\n\n  return result;\n}\n\n// Export full name\nexport { tr as trueRange };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { tr } from './trueRange';\nimport { sma } from '../trend/simpleMovingAverage';\n\n/**\n * Average true range result.\n */\nexport interface ATRResult {\n  trLine: number[];\n  atrLine: number[];\n}\n\n/**\n * Optional configuration of ATR parameters.\n */\nexport interface ATRConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of ATR.\n */\nexport const ATRDefaultConfig: Required<ATRConfig> = {\n  period: 14,\n};\n\n/**\n * Average True Range (ATR). It is a technical analysis indicator that\n * measures market volatility by decomposing the entire range of stock\n * prices for that period.\n *\n * TR = Max((High - Low), (High - Closing), (Closing - Low))\n * ATR = SMA TR\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param config configuration.\n * @return atr tr line and atr line.\n */\nexport function atr(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  config: ATRConfig = {}\n): ATRResult {\n  const { period } = { ...ATRDefaultConfig, ...config };\n  const trLine = tr(highs, lows, closings);\n  const atrLine = sma(trLine, { period });\n\n  return {\n    trLine,\n    atrLine,\n  };\n}\n\n// Export full name\nexport { atr as averageTrueRange };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, subtract } from '../../helper/numArray';\nimport { ema } from '../trend/exponentialMovingAverage';\nimport { BBResult } from './bollingerBands';\n\n/**\n * Bollinger bands width result.\n */\nexport interface BBWResult {\n  width: number[];\n  widthEma: number[];\n}\n\n/**\n * Optional configuration of Bollinger bands width parameters.\n */\nexport interface BBWConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of Bollinger bands width.\n */\nexport const BBWDefaultConfig: Required<BBWConfig> = {\n  period: 90,\n};\n\n/**\n * Bollinger Band Width. It measures the percentage difference between the\n * upper band and the lower band. It decreases as Bollinger Bands narrows\n * and increases as Bollinger Bands widens\n *\n * During a period of rising price volatity the band width widens, and\n * during a period of low market volatity band width contracts.\n *\n * Band Width = (Upper Band - Lower Band) / Middle Band\n *\n * @param bb bollinger bands.\n * @param config configuration.\n * @return bollinger bands width result.\n */\nexport function bbw(bb: BBResult, config: BBWConfig = {}): BBWResult {\n  const { period } = { ...BBWDefaultConfig, ...config };\n  const width = divide(subtract(bb.upper, bb.lower), bb.middle);\n\n  const widthEma = ema(width, { period });\n\n  return {\n    width,\n    widthEma,\n  };\n}\n\n// Export full name\nexport { bbw as bollingerBandsWidth };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, multiplyBy, subtract } from '../../helper/numArray';\nimport { mmax } from '../trend/movingMax';\nimport { mmin } from '../trend/movingMin';\nimport { atr } from './averageTrueRange';\n\n/**\n * Chandelier exit result object.\n */\nexport interface CEResult {\n  long: number[];\n  short: number[];\n}\n\n/**\n * Optional configuration of Chandelier exit parameters.\n */\nexport interface CEConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of Chandelier exit.\n */\nexport const CEDefaultConfig: Required<CEConfig> = {\n  period: 22,\n};\n\n/**\n * Chandelier Exit. It sets a trailing stop-loss based on the\n * Average True Value (ATR).\n *\n * Long Exit = 22-Period SMA High - ATR(22) * 3\n * Chandelier Exit Short = 22-Period SMA Low + ATR(22) * 3\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param config configuration.\n * @return chandelier exit.\n */\nexport function ce(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  config: CEConfig = {}\n): CEResult {\n  const { period } = { ...CEDefaultConfig, ...config };\n  const atrResult = atr(highs, lows, closings, { period });\n  const atrLine3 = multiplyBy(3, atrResult.atrLine);\n  const highestHigh = mmax(highs, { period });\n  const lowestLow = mmin(lows, { period });\n\n  const long = subtract(highestHigh, atrLine3);\n  const short = add(lowestLow, atrLine3);\n\n  return {\n    long,\n    short,\n  };\n}\n\n// Export full name\nexport { ce as chandelierExit };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, divideBy } from '../../helper/numArray';\nimport { mmax } from '../trend/movingMax';\nimport { mmin } from '../trend/movingMin';\n\n/**\n * Donchian channel result object.\n */\nexport interface DCResult {\n  upper: number[];\n  middle: number[];\n  lower: number[];\n}\n\n/**\n * Optional configuration of DC parameters.\n */\nexport interface DCConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of DC.\n */\nexport const DCDefaultConfig: Required<DCConfig> = {\n  period: 4,\n};\n\n/**\n * The Donchian Channel (DC) calculates three lines generated by moving average\n * calculations that comprise an indicator formed by upper and lower bands\n * around a midrange or median band. The upper band marks the highest\n * price of an asset while the lower band marks the lowest price of\n * an asset, and the area between the upper and lower bands\n * represents the Donchian Channel.\n *\n * Upper Channel = Mmax(closings, { period })\n * Lower Channel = Mmin(closings, { period })\n * Middle Channel = (Upper Channel + Lower Channel) / 2\n *\n * @param closings closing values.\n * @param config configuration.\n * @returns dc result.\n */\nexport function dc(closings: number[], config: DCConfig = {}): DCResult {\n  const { period } = { ...DCDefaultConfig, ...config };\n  const upper = mmax(closings, { period });\n  const lower = mmin(closings, { period });\n  const middle = divideBy(2, add(upper, lower));\n\n  return {\n    upper,\n    middle,\n    lower,\n  };\n}\n\n// Export full name\nexport { dc as donchianChannel };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, multiplyBy, subtract } from '../../helper/numArray';\nimport { ema } from '../trend/exponentialMovingAverage';\nimport { atr } from './averageTrueRange';\n\n/**\n * Keltner channel result object.\n */\nexport interface KCResult {\n  upper: number[];\n  middle: number[];\n  lower: number[];\n}\n\n/**\n * Optional configuration of KC parameters.\n */\nexport interface KCConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of KC.\n */\nexport const KCDefaultConfig: Required<KCConfig> = {\n  period: 20,\n};\n\n/**\n * The Keltner Channel (KC) provides volatility-based bands that are placed\n * on either side of an asset's price and can aid in determining the\n * direction of a trend.\n *\n * Middle Line = EMA(period, closings)\n * Upper Band = EMA(period, closings) + 2 * ATR(period, highs, lows, closings)\n * Lower Band = EMA(period, closings) - 2 * ATR(period, highs, lows, closings)\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param config configuration.\n * @returns kc result.\n */\nexport function kc(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  config: KCConfig = {}\n): KCResult {\n  const { period } = { ...KCDefaultConfig, ...config };\n  const atrResult = atr(highs, lows, closings, { period });\n  const atr2 = multiplyBy(2, atrResult.atrLine);\n\n  const middle = ema(closings, { period });\n  const upper = add(middle, atr2);\n  const lower = subtract(middle, atr2);\n\n  return {\n    middle,\n    upper,\n    lower,\n  };\n}\n\n// Export full name\nexport { kc as keltnerChannel };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  divide,\n  multiply,\n  multiplyBy,\n  sqrt,\n  subtract,\n} from '../../helper/numArray';\nimport { mmax } from '../trend/movingMax';\nimport { sma } from '../trend/simpleMovingAverage';\n\n/**\n * Optional configuration of UI parameters.\n */\nexport interface UIConfig {\n  period?: number;\n}\n\n/**\n * The default configuration of UI.\n */\nexport const UIDefaultConfig: Required<UIConfig> = {\n  period: 14,\n};\n\n/**\n * The Ulcer Index (UI) measures downside risk. The index increases in value\n * as the price moves farther away from a recent high and falls as the price\n * rises to new highs.\n *\n * High Closings = Max(period, Closings)\n * Percentage Drawdown = 100 * ((Closings - High Closings) / High Closings)\n * Squared Average = Sma(period, Percent Drawdown * Percent Drawdown)\n * Ulcer Index = Sqrt(Squared Average)\n *\n * @param closings closing values.\n * @param config configuration.\n * @returns ui values.\n */\nexport function ui(closings: number[], config: UIConfig = {}): number[] {\n  const { period } = { ...UIDefaultConfig, ...config };\n  const highClosings = mmax(closings, { period });\n  const percentageDrawdown = multiplyBy(\n    100,\n    divide(subtract(closings, highClosings), highClosings)\n  );\n  const squaredAverage = sma(multiply(percentageDrawdown, percentageDrawdown), {\n    period,\n  });\n  const result = sqrt(squaredAverage);\n\n  return result;\n}\n\n// Export full name\nexport { ui as ulcerIndex };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { checkSameLength } from '../../helper/numArray';\n\n/**\n * On-Balance Volume (OBV). It is a technical trading momentum indicator that\n * uses volume flow to predict changes in stock price.\n *\n *                   volume, if Closing > Closing-Prev\n * OBV = OBV-Prev +       0, if Closing = Closing-Prev\n *                  -volume, if Closing < Closing-Prev\n *\n * @param closings closing values.\n * @param volumes volume values.\n * @return obv values.\n */\nexport function obv(closings: number[], volumes: number[]): number[] {\n  checkSameLength(closings, volumes);\n\n  const result = new Array<number>(closings.length);\n\n  result[0] = 0;\n\n  for (let i = 1; i < result.length; i++) {\n    result[i] = result[i - 1];\n\n    if (closings[i] > closings[i - 1]) {\n      result[i] += volumes[i];\n    } else if (closings[i] < closings[i - 1]) {\n      result[i] -= volumes[i];\n    }\n  }\n\n  return result;\n}\n\n// Export full name\nexport { obv as onBalanceVolume };\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  divide,\n  multiply,\n  shiftRightAndFillBy,\n  subtract,\n} from '../../helper/numArray';\nimport { msum } from '../trend/movingSum';\n\n/**\n * The Volume Price Trend (VPT) provides a correlation between the volume and\n * the price.\n *\n * VPT = Previous VPT + (Volume * (Current Closing - Previous Closing) / Previous Closing)\n *\n * @param closings closing values.\n * @param volumes volume values.\n * @returns volume price trend values.\n */\nexport function vpt(closings: number[], volumes: number[]): number[] {\n  const previousClosings = shiftRightAndFillBy(1, closings[0], closings);\n  const vpt = multiply(\n    volumes,\n    divide(subtract(closings, previousClosings), previousClosings)\n  );\n  const result = msum(vpt, { period: vpt.length });\n\n  return result;\n}\n\n// Export full name\nexport { vpt as volumePriceTrend };\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "ABDefaultConfig", "AODefaultConfig", "APODefaultConfig", "ATRDefaultConfig", "AroonDefaultConfig", "BBDefaultConfig", "BBWDefaultConfig", "BinarySearchTree", "CCIDefaultConfig", "CEDefaultConfig", "CFODefaultConfig", "CMFDefaultConfig", "CMODefaultConfig", "Chart", "CompanyResultSortBy", "DCDefaultConfig", "DEMADefaultConfig", "EMADefaultConfig", "EMVDefaultConfig", "FIDefaultConfig", "IchimokuCloudDefaultConfig", "KCDefaultConfig", "KDJDefaultConfig", "MACDDefaultConfig", "MCFODefaultConfig", "MFIDefaultConfig", "MIDefaultConfig", "MMaxDefaultConfig", "MMinDefaultConfig", "MSTDDefaultConfig", "MSumDefaultConfig", "NVIDefaultConfig", "NumRange", "NumScaler", "PODefaultConfig", "PPODefaultConfig", "PSARDefaultConfig", "PVODefaultConfig", "QstickDefaultConfig", "RMADefaultConfig", "ROCDefaultConfig", "RSIDefaultConfig", "SMADefaultConfig", "STRATEGY_INFOS", "StochDefaultConfig", "StrategyStatsSortBy", "TEMADefaultConfig", "TRIMADefaultConfig", "TRIXDefaultConfig", "Trend", "UIDefaultConfig", "VWAPDefaultConfig", "VWMADefaultConfig", "VortexDefaultConfig", "WillrDefaultConfig", "ab", "abs", "apo", "ad", "add", "addBy", "ao", "aroon", "atr", "backtest", "bop", "bb", "bbw", "cci", "ce", "cfo", "cmf", "cmo", "changes", "checkSameLength", "computeStrategyStats", "daysAgo", "daysLaterFrom", "dc", "dema", "divide", "divideBy", "emv", "ema", "extractSigns", "fi", "generateNumbers", "ichimokuCloud", "kc", "kdj", "leastSquare", "linearRegressionUsingLeastSquare", "macd", "mi", "max", "mcfo", "mfi", "mmax", "mmin", "movingLeastSquare", "movingLinearRegressionUsingLeastSquare", "mstd", "msum", "multiply", "multiplyBy", "nvi", "obv", "psar", "ppo", "pvo", "po", "pow", "roc", "qstick", "rsi", "rma", "roundDigits", "roundDigitsAll", "shiftLeftAndFillBy", "shiftLeftBy", "shiftRightAndFillBy", "shiftRightBy", "sma", "since", "sortCompanyResults", "sortStrategyStats", "sqrt", "stoch", "subtract", "subtractBy", "tema", "toISODateString", "toMonthAndDay", "tr", "transpose", "trima", "trix", "typprice", "ui", "vpt", "vwap", "vwma", "vortex", "willr", "__toCommonJS", "checkSameLength", "values", "length", "i", "abs", "value", "add", "values1", "values2", "result", "addBy", "n", "divide", "divideBy", "multiply", "multiplyBy", "subtract", "subtractBy", "shiftRightAndFillBy", "fill", "shiftRightBy", "shiftLeftAndFillBy", "newIndex", "shiftLeftBy", "changes", "extractSigns", "transpose", "j", "max", "row", "roundDigits", "digits", "roundDigitsAll", "generateNumbers", "begin", "end", "step", "pow", "bases", "exponent", "base", "sqrt", "applyActions", "closings", "actions", "checkSameLength", "gains", "initialBalance", "balance", "shares", "i", "backtest", "asset", "infos", "result", "i", "actions", "gains", "applyActions", "a", "b", "CompanyResultSortBy", "sortCompanyResults", "companyResults", "sortBy", "ascending", "sorted", "a", "b", "buyAndHoldStrategy", "asset", "SMADefaultConfig", "sma", "values", "config", "period", "result", "sum", "i", "AODefaultConfig", "ao", "highs", "lows", "config", "fast", "slow", "medianPrice", "divideBy", "add", "smaFast", "sma", "smaSlow", "subtract", "aoStrategy", "asset", "config", "strategyConfig", "AODefaultConfig", "ao", "value", "IchimokuCloudDefaultConfig", "averagePriceReducer", "period", "highs", "lows", "projection", "acc", "_", "i", "from", "to", "max", "min", "calculateTenkanSen", "short", "calculateKijunSen", "medium", "calculateSenkouSpanA", "tenkanSen", "kijunSen", "ssa", "k", "calculateSenkouSpanB", "long", "ichimokuCloud", "closings", "config", "checkSameLength", "close", "tenkan", "kijun", "shiftLeftBy", "ichimokuCloudStrategy", "asset", "config", "strategyConfig", "IchimokuCloudDefaultConfig", "indicator", "ichimokuCloud", "actions", "i", "RMADefaultConfig", "rma", "values", "config", "period", "result", "sum", "i", "count", "RSIDefaultConfig", "rsi", "closings", "config", "period", "gains", "losses", "i", "difference", "meanGains", "rma", "meanLosses", "rValue", "rsValue", "rsi2Strategy", "asset", "indicator", "rsi", "actions", "i", "BinarySearchTree", "_BinarySearchTree", "value", "node", "current", "found", "info", "minInfo", "maxInfo", "child", "root", "MMinDefaultConfig", "mmin", "values", "config", "period", "result", "bst", "BinarySearchTree", "i", "MMaxDefaultConfig", "mmax", "values", "config", "period", "result", "bst", "BinarySearchTree", "i", "StochDefaultConfig", "stoch", "highs", "lows", "closings", "config", "kPeriod", "dPeriod", "highestHigh", "mmax", "lowestLow", "mmin", "kValue", "multiplyBy", "divide", "subtract", "dValue", "sma", "stochStrategy", "asset", "config", "strategyConfig", "StochDefaultConfig", "result", "stoch", "actions", "i", "WillrDefaultConfig", "willr", "highs", "lows", "closings", "config", "period", "highestHigh", "mmax", "lowestLow", "mmin", "multiplyBy", "divide", "subtract", "willRStrategy", "asset", "config", "strategyConfig", "WillrDefaultConfig", "willr", "value", "EMADefaultConfig", "ema", "values", "config", "period", "result", "kValue", "mValue", "i", "APODefaultConfig", "apo", "values", "config", "fastPeriod", "slowPeriod", "fast", "ema", "slow", "subtract", "apoStrategy", "asset", "config", "fast", "slow", "APODefaultConfig", "result", "apo", "actions", "i", "since", "values", "result", "last", "count", "AroonDefaultConfig", "aroon", "highs", "lows", "config", "checkSameLength", "period", "sinceLastHigh", "since", "mmax", "sinceLastLow", "mmin", "up", "multiplyBy", "divideBy", "addBy", "down", "aroonStrategy", "asset", "config", "strategyConfig", "AroonDefaultConfig", "indicator", "aroon", "actions", "i", "bop", "openings", "highs", "lows", "closings", "divide", "subtract", "bopStrategy", "asset", "bop", "value", "leastSquare", "x", "y", "checkSameLength", "sumX", "sumX2", "sumY", "sumXY", "i", "n", "m", "b", "movingLeastSquare", "period", "linearRegressionUsingLeastSquare", "ls", "addBy", "multiplyBy", "movingLinearRegressionUsingLeastSquare", "add", "multiply", "CFODefaultConfig", "cfo", "closings", "x", "generateNumbers", "r", "linearRegressionUsingLeastSquare", "multiplyBy", "divide", "subtract", "MCFODefaultConfig", "mcfo", "closings", "config", "period", "xVal", "generateNumbers", "rVal", "movingLinearRegressionUsingLeastSquare", "multiplyBy", "divide", "subtract", "cfoStrategy", "asset", "cfo", "value", "KDJDefaultConfig", "kdj", "highs", "lows", "closings", "config", "rPeriod", "kPeriod", "dPeriod", "highest", "mmax", "lowest", "mmin", "rsv", "multiplyBy", "divide", "subtract", "kValue", "sma", "dValue", "jValue", "kdjStrategy", "asset", "config", "strategyConfig", "KDJDefaultConfig", "kdjResult", "kdj", "actions", "i", "MACDDefaultConfig", "macd", "closings", "config", "fast", "slow", "signal", "emaFast", "ema", "emaSlow", "macdLine", "subtract", "signalLine", "macdStrategy", "asset", "config", "strategyConfig", "MACDDefaultConfig", "result", "macd", "actions", "i", "Trend", "PSARDefaultConfig", "psar", "highs", "lows", "closings", "config", "checkSameLength", "step", "max", "trends", "psarResult", "af", "ep", "i", "prevEp", "psarStrategy", "asset", "config", "strategyConfig", "PSARDefaultConfig", "psar", "trend", "typprice", "highs", "lows", "closings", "divideBy", "add", "typpriceStrategy", "asset", "result", "typprice", "actions", "i", "MSumDefaultConfig", "msum", "values", "config", "period", "result", "sum", "i", "VortexDefaultConfig", "vortex", "highs", "lows", "closings", "config", "checkSameLength", "period", "prevClosings", "shiftRightBy", "plusVm", "abs", "subtract", "minusVm", "plusVmSum", "msum", "minusVmSum", "tr", "max", "trSum", "plus", "divide", "minus", "vortexStrategy", "asset", "config", "strategyConfig", "VortexDefaultConfig", "indicator", "vortex", "actions", "i", "ABDefaultConfig", "ab", "highs", "lows", "closings", "config", "checkSameLength", "period", "multiplier", "k", "divide", "subtract", "add", "upper", "sma", "multiply", "addBy", "multiplyBy", "middle", "lower", "abStrategy", "asset", "config", "strategyConfig", "ABDefaultConfig", "result", "ab", "actions", "i", "MSTDDefaultConfig", "mstd", "values", "config", "period", "result", "averages", "sma", "i", "sum", "k", "BBDefaultConfig", "bb", "closings", "config", "period", "std2", "multiplyBy", "mstd", "middle", "sma", "upper", "add", "lower", "subtract", "bbStrategy", "asset", "config", "strategyConfig", "BBDefaultConfig", "result", "bb", "actions", "i", "PODefaultConfig", "po", "highs", "lows", "closings", "config", "period", "smooth", "x", "generateNumbers", "lsHighs", "movingLeastSquare", "lsLows", "vHighs", "add", "multiply", "vLows", "pu", "mmax", "pl", "mmin", "poResult", "divide", "multiplyBy", "subtract", "spoResult", "ema", "poStrategy", "asset", "config", "strategyConfig", "PODefaultConfig", "result", "po", "actions", "i", "CMFDefaultConfig", "cmf", "highs", "lows", "closings", "volumes", "config", "period", "moneyFlowMultipler", "divide", "subtract", "moneyFlowVolume", "multiply", "msum", "cmfStrategy", "asset", "config", "strategyConfig", "CMFDefaultConfig", "cmf", "value", "EMVDefaultConfig", "emv", "highs", "lows", "volumes", "config", "period", "distanceMoved", "changes", "divideBy", "add", "boxRatio", "divide", "subtract", "sma", "emvStrategy", "asset", "config", "strategyConfig", "EMVDefaultConfig", "emv", "value", "FIDefaultConfig", "fi", "closings", "volumes", "config", "period", "ema", "multiply", "changes", "fiStrategy", "asset", "config", "strategyConfig", "FIDefaultConfig", "fi", "value", "MFIDefaultConfig", "mfi", "highs", "lows", "closings", "volumes", "config", "period", "rawMoneyFlow", "multiply", "typprice", "signs", "extractSigns", "changes", "moneyFlow", "positiveMoneyFlow", "value", "negativeMoneyFlow", "moneyRatio", "divide", "msum", "multiplyBy", "addBy", "pow", "mfiStrategy", "asset", "config", "strategyConfig", "MFIDefaultConfig", "mfi", "value", "NVIDefaultConfig", "nvi", "closings", "volumes", "config", "checkSameLength", "start", "result", "i", "nviStrategy", "asset", "config", "strategyConfig", "NVIDefaultConfig", "result", "nvi", "nviEma", "ema", "actions", "i", "VWAPDefaultConfig", "vwap", "closings", "volumes", "config", "period", "divide", "msum", "multiply", "vwapStrategy", "asset", "config", "strategyConfig", "VWAPDefaultConfig", "result", "vwap", "subtract", "value", "STRATEGY_INFOS", "buyAndHoldStrategy", "aoStrategy", "rsi2Strategy", "ichimokuCloudStrategy", "stochStrategy", "willRStrategy", "apoStrategy", "aroonStrategy", "bopStrategy", "cfoStrategy", "kdjStrategy", "macdStrategy", "psarStrategy", "typpriceStrategy", "vortexStrategy", "abStrategy", "bbStrategy", "poStrategy", "cmfStrategy", "emvStrategy", "fiStrategy", "mfiStrategy", "nviStrategy", "vwapStrategy", "newStrategyStats", "result", "updateStrategyStats", "stats", "computeStrategyStats", "companyResults", "statsMap", "companyResult", "strategyResult", "strategyStats", "statsArray", "a", "b", "StrategyStatsSortBy", "sortStrategyStats", "sortBy", "ascending", "sorted", "NumRange", "_NumRange", "min", "max", "ranges", "p", "c", "values", "NumScaler", "from", "to", "n", "DEFAULT_STYLE", "DEFAULT_WIDTH", "FOCUS_STYLE", "FOCUS_WIDTH", "LEGEND_HEIGHT", "LEGEND_GAP", "LEGEND_FONT", "NO_FOCUS", "DEFAULT_RANGE", "NumRange", "Chart", "id", "canvas", "context", "NumScaler", "ev", "dataSet", "legend", "found", "height", "lastX", "lastY", "i", "x", "y", "index", "xOffset", "text", "roundDigits", "d", "clientRect", "toISODateString", "date", "daysAgo", "days", "ago", "daysLaterFrom", "later", "toMonthAndDay", "ad", "highs", "lows", "closings", "volume", "mfm", "divide", "subtract", "mfv", "multiply", "result", "i", "CMODefaultConfig", "cmo", "highs", "lows", "closings", "volumes", "config", "fast", "slow", "adResult", "ad", "cmoResult", "subtract", "ema", "PPODefaultConfig", "ppo", "prices", "config", "fastPeriod", "slowPeriod", "signalPeriod", "fastEma", "ema", "slowEma", "ppoResult", "multiplyBy", "divide", "subtract", "signal", "histogram", "PVODefaultConfig", "pvo", "volumes", "config", "fastPeriod", "slowPeriod", "signalPeriod", "fastEma", "ema", "slowEma", "pvoResult", "multiplyBy", "divide", "subtract", "signal", "histogram", "ROCDefaultConfig", "roc", "values", "config", "period", "result", "CCIDefaultConfig", "cci", "highs", "lows", "closings", "config", "period", "tp", "typprice", "ma", "sma", "md", "abs", "subtract", "divide", "multiplyBy", "DEMADefaultConfig", "dema", "values", "config", "period", "ema1", "ema", "ema2", "subtract", "multiplyBy", "MIDefaultConfig", "mi", "highs", "lows", "config", "emaPeriod", "miPeriod", "ema1", "ema", "subtract", "ema2", "ratio", "divide", "msum", "QstickDefaultConfig", "qstick", "openings", "closings", "config", "period", "sma", "subtract", "TRIMADefaultConfig", "trima", "values", "config", "period", "n1", "n2", "sma", "TRIXDefaultConfig", "trix", "values", "config", "period", "ema1", "ema", "ema2", "ema3", "previous", "shiftRightAndFillBy", "divide", "subtract", "TEMADefaultConfig", "tema", "values", "config", "period", "ema1", "ema", "ema2", "ema3", "add", "subtract", "multiplyBy", "VWMADefaultConfig", "vwma", "closings", "volumes", "config", "period", "divide", "msum", "multiply", "tr", "highs", "lows", "closings", "checkSameLength", "previous", "shiftRightAndFillBy", "max", "subtract", "abs", "ATRDefaultConfig", "atr", "highs", "lows", "closings", "config", "period", "trLine", "tr", "atrLine", "sma", "BBWDefaultConfig", "bbw", "bb", "config", "period", "width", "divide", "subtract", "widthEma", "ema", "CEDefaultConfig", "ce", "highs", "lows", "closings", "config", "period", "atrResult", "atr", "atrLine3", "multiplyBy", "highestHigh", "mmax", "lowestLow", "mmin", "long", "subtract", "short", "add", "DCDefaultConfig", "dc", "closings", "config", "period", "upper", "mmax", "lower", "mmin", "middle", "divideBy", "add", "KCDefaultConfig", "kc", "highs", "lows", "closings", "config", "period", "atrResult", "atr", "atr2", "multiplyBy", "middle", "ema", "upper", "add", "lower", "subtract", "UIDefaultConfig", "ui", "closings", "config", "period", "highClosings", "mmax", "percentageDrawdown", "multiplyBy", "divide", "subtract", "squaredAverage", "sma", "multiply", "sqrt", "obv", "closings", "volumes", "checkSameLength", "result", "i", "vpt", "closings", "volumes", "previousClosings", "shiftRightAndFillBy", "multiply", "divide", "subtract", "msum"]
}
