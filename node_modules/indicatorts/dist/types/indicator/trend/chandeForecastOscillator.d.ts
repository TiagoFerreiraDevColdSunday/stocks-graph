/**
 * Optional configuration of Chande forecast oscillator parameters.
 */
export interface CFOConfig {
    period?: number;
}
/**
 * The default configuration of Chande forecast oscillator.
 */
export declare const CFODefaultConfig: Required<CFOConfig>;
/**
 * The Chande Forecast Oscillator developed by Tushar Chande The Forecast
 * Oscillator plots the percentage difference between the closing price and
 * the n-period linear regression forecasted price. The oscillator is above
 * zero when the forecast price is greater than the closing price and less
 * than zero if it is below.
 *
 * R = Linreg(Closing)
 * CFO = ((Closing - R) / Closing) * 100
 *
 * @param closings closing values.
 * @return cfo values.
 */
export declare function cfo(closings: number[]): number[];
export { cfo as chandeForecastOscillator };
/**
 * Optional configuration of moving Chande forecast oscillator parameters.
 */
export interface MCFOConfig {
    period?: number;
}
/**
 * The default configuration of moving Chande forecast oscillator.
 */
export declare const MCFODefaultConfig: Required<MCFOConfig>;
/**
 * Moving Chande Forecast Oscillator calculates based on
 * the given period.
 *
 * The Chande Forecast Oscillator developed by Tushar Chande The Forecast
 * Oscillator plots the percentage difference between the closing price and
 * the n-period linear regression forecasted price. The oscillator is above
 * zero when the forecast price is greater than the closing price and less
 * than zero if it is below.
 *
 * R = Linreg(Closing)
 * CFO = ((Closing - R) / Closing) * 100
 *
 * @param closings closing values.
 * @param config configuration.
 * @return moving cfo.
 */
export declare function mcfo(closings: number[], config?: MCFOConfig): number[];
export { mcfo as movingChandeForecastOscillator };
