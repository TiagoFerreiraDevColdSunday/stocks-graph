/**
 * KDJ result.
 */
export interface KDJResult {
    k: number[];
    d: number[];
    j: number[];
}
/**
 * Optional configuration of KDJ parameters.
 */
export interface KDJConfig {
    rPeriod?: number;
    kPeriod?: number;
    dPeriod?: number;
}
/**
 * The default configuration of KDJ.
 */
export declare const KDJDefaultConfig: Required<KDJConfig>;
/**
 * The kdj function calculates the KDJ indicator, also known as
 * the Random Index. KDJ is calculated similar to the Stochastic
 * Oscillator with the difference of having the J line. It is
 * used to analyze the trend and entry points.
 *
 * The K and D lines show if the asset is overbought when they
 * crosses above 80%, and oversold when they crosses below
 * 20%. The J line represents the divergence.
 *
 * RSV = ((Closing - Min(Low, rPeriod))
 *       / (Max(High, rPeriod) - Min(Low, rPeriod))) * 100
 * K = Sma(RSV, kPeriod)
 * D = Sma(K, dPeriod)
 * J = (3 * K) - (2 * D)
 *
 * @param highs high values.
 * @param lows low values.
 * @param closings closing values.
 * @param config configuration.
 * @return kdj result.
 */
export declare function kdj(highs: number[], lows: number[], closings: number[], config?: KDJConfig): KDJResult;
export { kdj as randomIndex };
